
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000274  00000000  00000000  000008a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000102  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000f9  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000cb  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  00000dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main (void) {

    int i;
    // Setze alle Ausgaenge an Port A auf Ausgang
    DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26

    // Gib auf Pin 0 und 1 3.3v
    PORTA |= (1<<Richard) | (1<<Lisa) | (1<<Anton);
  70:	8b b3       	in	r24, 0x1b	; 27
  72:	87 60       	ori	r24, 0x07	; 7
  74:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	2f e7       	ldi	r18, 0x7F	; 127
  78:	8a e1       	ldi	r24, 0x1A	; 26
  7a:	96 e0       	ldi	r25, 0x06	; 6
  7c:	21 50       	subi	r18, 0x01	; 1
  7e:	80 40       	sbci	r24, 0x00	; 0
  80:	90 40       	sbci	r25, 0x00	; 0
  82:	e1 f7       	brne	.-8      	; 0x7c <main+0x10>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
                i = i+1;
            }
        }
        else{
            while (i<=20){
                PORTA = PORTA ^(1<<Lisa);
  88:	32 e0       	ldi	r19, 0x02	; 2
    PORTA |= (1<<Richard) | (1<<Lisa) | (1<<Anton);

    _delay_ms(2000);
    while (1) {
        i = 0;
        PORTA &= ~(1 << Richard);
  8a:	d8 98       	cbi	0x1b, 0	; 27
  8c:	e7 ea       	ldi	r30, 0xA7	; 167
  8e:	f1 e6       	ldi	r31, 0x61	; 97
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x2a>
  96:	00 00       	nop
        _delay_ms(100);
        PORTA |= (1 << Richard);
  98:	d8 9a       	sbi	0x1b, 0	; 27
  9a:	87 ea       	ldi	r24, 0xA7	; 167
  9c:	91 e6       	ldi	r25, 0x61	; 97
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
        _delay_ms(100);
        PORTA &= ~(1<<Lisa);
  a6:	d9 98       	cbi	0x1b, 1	; 27
        if (PINA & (1<<Lisa)){
  a8:	c9 9b       	sbis	0x19, 1	; 25
  aa:	17 c0       	rjmp	.+46     	; 0xda <main+0x6e>
  ac:	8a ec       	ldi	r24, 0xCA	; 202
  ae:	90 e0       	ldi	r25, 0x00	; 0
            while (i<=201){
                PORTA = PORTA ^(1<<Lisa);
  b0:	2b b3       	in	r18, 0x1b	; 27
  b2:	23 27       	eor	r18, r19
  b4:	2b bb       	out	0x1b, r18	; 27
  b6:	e3 ec       	ldi	r30, 0xC3	; 195
  b8:	f9 e0       	ldi	r31, 0x09	; 9
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x4e>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	01 97       	sbiw	r24, 0x01	; 1
        _delay_ms(100);
        PORTA |= (1 << Richard);
        _delay_ms(100);
        PORTA &= ~(1<<Lisa);
        if (PINA & (1<<Lisa)){
            while (i<=201){
  c4:	a9 f7       	brne	.-22     	; 0xb0 <main+0x44>
  c6:	ff e3       	ldi	r31, 0x3F	; 63
  c8:	2d e0       	ldi	r18, 0x0D	; 13
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	f1 50       	subi	r31, 0x01	; 1
  ce:	20 40       	sbci	r18, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x60>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x6a>
  d6:	00 00       	nop
  d8:	d8 cf       	rjmp	.-80     	; 0x8a <main+0x1e>
        PORTA &= ~(1 << Richard);
        _delay_ms(100);
        PORTA |= (1 << Richard);
        _delay_ms(100);
        PORTA &= ~(1<<Lisa);
        if (PINA & (1<<Lisa)){
  da:	85 e1       	ldi	r24, 0x15	; 21
  dc:	90 e0       	ldi	r25, 0x00	; 0
                i = i+1;
            }
        }
        else{
            while (i<=20){
                PORTA = PORTA ^(1<<Lisa);
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	23 27       	eor	r18, r19
  e2:	2b bb       	out	0x1b, r18	; 27
  e4:	e7 ea       	ldi	r30, 0xA7	; 167
  e6:	f1 e6       	ldi	r31, 0x61	; 97
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x7c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
  f0:	01 97       	sbiw	r24, 0x01	; 1
                _delay_ms(10);
                i = i+1;
            }
        }
        else{
            while (i<=20){
  f2:	a9 f7       	brne	.-22     	; 0xde <main+0x72>
  f4:	e8 cf       	rjmp	.-48     	; 0xc6 <main+0x5a>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
