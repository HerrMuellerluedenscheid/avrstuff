
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000124  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000df  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000092  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000aa  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_vInit>:
#include <stdio.h>

void USART_vInit(void){

    //set baud rate
    UBRRH = (uint8_t)(51>>8);
  6c:	10 bc       	out	0x20, r1	; 32
    UBRRL = (uint8_t)51;
  6e:	83 e3       	ldi	r24, 0x33	; 51
  70:	89 b9       	out	0x09, r24	; 9
    
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSRC = (0<<USBS)|(3<<UCSZ0);
  72:	86 e0       	ldi	r24, 0x06	; 6
  74:	80 bd       	out	0x20, r24	; 32

    // enable receiver and transmitter
    UCSRB = (1<<RXEN)|(1<<TXEN);
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	8a b9       	out	0x0a, r24	; 10
  7a:	08 95       	ret

0000007c <USART_vSendByte>:
}

void USART_vSendByte(uint8_t u8Data){

    // wait if a byte is being transmitted
    while((UCSRA&(1<<UDRE))==0);
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USART_vSendByte>

    // transmit data
    UDR = u8Data;
  80:	8c b9       	out	0x0c, r24	; 12
  82:	08 95       	ret

00000084 <USART_vReceiveByte>:
}

uint8_t USART_vReceiveByte(){
    // Wait until a byte has been received
    while ((UCSRA&(1<<RXC)) == 0);
  84:	5f 9b       	sbis	0x0b, 7	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <USART_vReceiveByte>

    // Return received data
    return UDR;
  88:	8c b1       	in	r24, 0x0c	; 12
}
  8a:	08 95       	ret

0000008c <main>:

int main (void) {
    DDRB = 0xFF;
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
    uint8_t u8Data;

    // Initialize USART
    USART_vInit();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <USART_vInit>

    // Send string
    USART_vSendByte('A');
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_vSendByte>

    // Repeat indefinitely
    for (;;) //forever
    {
        //Echo received characters
        u8Data = USART_vReceiveByte();
  9a:	0e 94 42 00 	call	0x84	; 0x84 <USART_vReceiveByte>

        if(u8Data == 0xAA)
  9e:	8a 3a       	cpi	r24, 0xAA	; 170
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0xe>
        {
            u8Data = USART_vReceiveByte();
  a2:	0e 94 42 00 	call	0x84	; 0x84 <USART_vReceiveByte>
            PORTB = u8Data;
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	f8 cf       	rjmp	.-16     	; 0x9a <main+0xe>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
