
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000596  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000019bc  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000307  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000492  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fd  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000016e  00000000  00000000  00002977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000126  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000409  00000000  00000000  00002cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000030f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  64:	0c 94 c9 02 	jmp	0x592	; 0x592 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_init>:
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>

void LED_init(void){
    DDRA = 0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
  70:	08 95       	ret

00000072 <blink_LED>:
}

void blink_LED(int id, int f, float duration){
  72:	3f 92       	push	r3
  74:	4f 92       	push	r4
  76:	5f 92       	push	r5
  78:	6f 92       	push	r6
  7a:	7f 92       	push	r7
  7c:	8f 92       	push	r8
  7e:	9f 92       	push	r9
  80:	af 92       	push	r10
  82:	bf 92       	push	r11
  84:	cf 92       	push	r12
  86:	df 92       	push	r13
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	00 d0       	rcall	.+0      	; 0x96 <blink_LED+0x24>
  96:	00 d0       	rcall	.+0      	; 0x98 <blink_LED+0x26>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	18 2f       	mov	r17, r24
  9e:	5b 01       	movw	r10, r22
  a0:	69 01       	movw	r12, r18
  a2:	7a 01       	movw	r14, r20
    // f -> frequency of flickering in Hz
    int num_flick_flacks = duration * f;
  a4:	88 27       	eor	r24, r24
  a6:	77 fd       	sbrc	r23, 7
  a8:	80 95       	com	r24
  aa:	98 2f       	mov	r25, r24
  ac:	0e 94 8a 01 	call	0x314	; 0x314 <__floatsisf>
  b0:	9b 01       	movw	r18, r22
  b2:	ac 01       	movw	r20, r24
  b4:	c7 01       	movw	r24, r14
  b6:	b6 01       	movw	r22, r12
  b8:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
  bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <__fixsfsi>
  c0:	7a 83       	std	Y+2, r23	; 0x02
  c2:	69 83       	std	Y+1, r22	; 0x01
    int count = 0;
    int dly = 1000/f;
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	b5 01       	movw	r22, r10
  ca:	0e 94 a1 02 	call	0x542	; 0x542 <__divmodhi4>
    while(count<num_flick_flacks){
        PORTA = PORTA ^(1 << id );
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	38 2e       	mov	r3, r24
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <blink_LED+0x66>
  d6:	33 0c       	add	r3, r3
  d8:	1a 95       	dec	r17
  da:	ea f7       	brpl	.-6      	; 0xd6 <blink_LED+0x64>
}

void blink_LED(int id, int f, float duration){
    // f -> frequency of flickering in Hz
    int num_flick_flacks = duration * f;
    int count = 0;
  dc:	1c 82       	std	Y+4, r1	; 0x04
  de:	1b 82       	std	Y+3, r1	; 0x03
    int dly = 1000/f;
    while(count<num_flick_flacks){
        PORTA = PORTA ^(1 << id );
        count += 1;
        _delay_ms(dly);
  e0:	4b 01       	movw	r8, r22
  e2:	aa 24       	eor	r10, r10
  e4:	97 fc       	sbrc	r9, 7
  e6:	a0 94       	com	r10
  e8:	ba 2c       	mov	r11, r10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ea:	04 e6       	ldi	r16, 0x64	; 100
  ec:	10 e0       	ldi	r17, 0x00	; 0
void blink_LED(int id, int f, float duration){
    // f -> frequency of flickering in Hz
    int num_flick_flacks = duration * f;
    int count = 0;
    int dly = 1000/f;
    while(count<num_flick_flacks){
  ee:	4d c0       	rjmp	.+154    	; 0x18a <blink_LED+0x118>
        PORTA = PORTA ^(1 << id );
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	83 25       	eor	r24, r3
  f4:	8b bb       	out	0x1b, r24	; 27
        count += 1;
  f6:	2b 81       	ldd	r18, Y+3	; 0x03
  f8:	3c 81       	ldd	r19, Y+4	; 0x04
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	3c 83       	std	Y+4, r19	; 0x04
 100:	2b 83       	std	Y+3, r18	; 0x03
        _delay_ms(dly);
 102:	c5 01       	movw	r24, r10
 104:	b4 01       	movw	r22, r8
 106:	0e 94 8a 01 	call	0x314	; 0x314 <__floatsisf>
 10a:	6b 01       	movw	r12, r22
 10c:	7c 01       	movw	r14, r24
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	4a e7       	ldi	r20, 0x7A	; 122
 114:	54 e4       	ldi	r21, 0x44	; 68
 116:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
 11a:	2b 01       	movw	r4, r22
 11c:	3c 01       	movw	r6, r24
	if (__tmp < 1.0)
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e8       	ldi	r20, 0x80	; 128
 124:	5f e3       	ldi	r21, 0x3F	; 63
 126:	75 2d       	mov	r23, r5
 128:	97 2d       	mov	r25, r7
 12a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__cmpsf2>
 12e:	87 fd       	sbrc	r24, 7
 130:	27 c0       	rjmp	.+78     	; 0x180 <blink_LED+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	3f ef       	ldi	r19, 0xFF	; 255
 136:	4f e7       	ldi	r20, 0x7F	; 127
 138:	57 e4       	ldi	r21, 0x47	; 71
 13a:	64 2d       	mov	r22, r4
 13c:	75 2d       	mov	r23, r5
 13e:	86 2d       	mov	r24, r6
 140:	97 2d       	mov	r25, r7
 142:	0e 94 12 02 	call	0x424	; 0x424 <__gesf2>
 146:	18 16       	cp	r1, r24
 148:	a4 f4       	brge	.+40     	; 0x172 <blink_LED+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e2       	ldi	r20, 0x20	; 32
 150:	51 e4       	ldi	r21, 0x41	; 65
 152:	c7 01       	movw	r24, r14
 154:	b6 01       	movw	r22, r12
 156:	0e 94 16 02 	call	0x42c	; 0x42c <__mulsf3>
 15a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__fixunssfsi>
 15e:	05 c0       	rjmp	.+10     	; 0x16a <blink_LED+0xf8>
 160:	c8 01       	movw	r24, r16
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <blink_LED+0xf0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	61 50       	subi	r22, 0x01	; 1
 168:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16a:	61 15       	cp	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	c1 f7       	brne	.-16     	; 0x160 <blink_LED+0xee>
 170:	0c c0       	rjmp	.+24     	; 0x18a <blink_LED+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 172:	64 2d       	mov	r22, r4
 174:	75 2d       	mov	r23, r5
 176:	86 2d       	mov	r24, r6
 178:	97 2d       	mov	r25, r7
 17a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__fixunssfsi>
 17e:	02 c0       	rjmp	.+4      	; 0x184 <blink_LED+0x112>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	cb 01       	movw	r24, r22
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <blink_LED+0x114>
void blink_LED(int id, int f, float duration){
    // f -> frequency of flickering in Hz
    int num_flick_flacks = duration * f;
    int count = 0;
    int dly = 1000/f;
    while(count<num_flick_flacks){
 18a:	8b 81       	ldd	r24, Y+3	; 0x03
 18c:	9c 81       	ldd	r25, Y+4	; 0x04
 18e:	e9 81       	ldd	r30, Y+1	; 0x01
 190:	fa 81       	ldd	r31, Y+2	; 0x02
 192:	8e 17       	cp	r24, r30
 194:	9f 07       	cpc	r25, r31
 196:	0c f4       	brge	.+2      	; 0x19a <blink_LED+0x128>
 198:	ab cf       	rjmp	.-170    	; 0xf0 <blink_LED+0x7e>
        PORTA = PORTA ^(1 << id );
        count += 1;
        _delay_ms(dly);
    }
    PORTA |= (0 << id );
 19a:	8b b3       	in	r24, 0x1b	; 27
 19c:	8b bb       	out	0x1b, r24	; 27
}
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	df 90       	pop	r13
 1b4:	cf 90       	pop	r12
 1b6:	bf 90       	pop	r11
 1b8:	af 90       	pop	r10
 1ba:	9f 90       	pop	r9
 1bc:	8f 90       	pop	r8
 1be:	7f 90       	pop	r7
 1c0:	6f 90       	pop	r6
 1c2:	5f 90       	pop	r5
 1c4:	4f 90       	pop	r4
 1c6:	3f 90       	pop	r3
 1c8:	08 95       	ret

000001ca <USART_vInit>:

void USART_vInit(void){

    //set baud rate
    UBRRH = (unsigned char)(25>>8);
 1ca:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) 25;
 1cc:	89 e1       	ldi	r24, 0x19	; 25
 1ce:	89 b9       	out	0x09, r24	; 9

    // enable receiver and transmitter
    UCSRB = (1<<RXEN) | (1<<TXEN);
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	8a b9       	out	0x0a, r24	; 10
    // Set frame format to 8 data bits, odd parity, 1 stop bit
    // USBS: Stop Bit Selection if USBS=0 -> 1 bit  (table 65)
    // UCSZ: Character SiZe (table 66):
    //  UCSZ0 ==1 & UCSZ1 ==1 -> 8 bit
    // UPM: Parity Mode (table 64) if UPM1=UPM0=0 -> no parity
    UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<USBS) | (0<<UPM0) | (0<<UPM1);
 1d4:	86 e8       	ldi	r24, 0x86	; 134
 1d6:	80 bd       	out	0x20, r24	; 32
 1d8:	08 95       	ret

000001da <USART_vSendByte>:
}

void USART_vSendByte(uint8_t u8Data){

    // wait if a byte is being transmitted
    while((UCSRA&(1<<UDRE))==0);
 1da:	5d 9b       	sbis	0x0b, 5	; 11
 1dc:	fe cf       	rjmp	.-4      	; 0x1da <USART_vSendByte>

    // transmit data
    UDR = u8Data;
 1de:	8c b9       	out	0x0c, r24	; 12
 1e0:	08 95       	ret

000001e2 <USART_vSendChar>:
    // wait if a byte is being transmitted
    // UDRE: Data Register Empty flag.
    // While data is transmitted, UDRE is not empty. 
    // Another option to check if data is been sent is to read the state of
    // TXC (transmit complete)
    while((UCSRA&(1<<UDRE))==0);
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <USART_vSendChar>

    // As soon as UDRE is empty, transmit data
    UDR = u8Data;
 1e6:	8c b9       	out	0x0c, r24	; 12
 1e8:	08 95       	ret

000001ea <USART_vReceiveByte>:
}

uint8_t USART_vReceiveByte(){
    // Wait until a byte has been received
    while ((UCSRA&(1<<RXC)) == 0);
 1ea:	5f 9b       	sbis	0x0b, 7	; 11
 1ec:	fe cf       	rjmp	.-4      	; 0x1ea <USART_vReceiveByte>

    // Return received data
    return UDR;
 1ee:	8c b1       	in	r24, 0x0c	; 12
}
 1f0:	08 95       	ret

000001f2 <main>:

int main (void) {
    DDRB = 0xFF;
 1f2:	cf ef       	ldi	r28, 0xFF	; 255
 1f4:	c7 bb       	out	0x17, r28	; 23
    uint8_t u8Data;
    uint8_t i = 0;
    char val = '0';
    // Initialize USART
    USART_vInit();
 1f6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <USART_vInit>
#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>

void LED_init(void){
    DDRA = 0xff;
 1fa:	ca bb       	out	0x1a, r28	; 26
    uint8_t i = 0;
    char val = '0';
    // Initialize USART
    USART_vInit();
    LED_init();
    blink_LED(receiving, 10, 1);
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e8       	ldi	r20, 0x80	; 128
 202:	5f e3       	ldi	r21, 0x3F	; 63
 204:	6a e0       	ldi	r22, 0x0A	; 10
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 39 00 	call	0x72	; 0x72 <blink_LED>
    blink_LED(sending, 10, 1);
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e8       	ldi	r20, 0x80	; 128
 216:	5f e3       	ldi	r21, 0x3F	; 63
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 39 00 	call	0x72	; 0x72 <blink_LED>
}

int main (void) {
    DDRB = 0xFF;
    uint8_t u8Data;
    uint8_t i = 0;
 224:	c0 e0       	ldi	r28, 0x00	; 0
    while (i<4){
        // Send string
        if (i==100){
            i = 0;
        }
        USART_vSendByte(i);
 226:	8c 2f       	mov	r24, r28
 228:	0e 94 ed 00 	call	0x1da	; 0x1da <USART_vSendByte>
        //USART_vSendChar(val);
        blink_LED(sending, 3, 1);
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e8       	ldi	r20, 0x80	; 128
 232:	5f e3       	ldi	r21, 0x3F	; 63
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 39 00 	call	0x72	; 0x72 <blink_LED>
        i = i + 1;
 240:	cf 5f       	subi	r28, 0xFF	; 255
    // Initialize USART
    USART_vInit();
    LED_init();
    blink_LED(receiving, 10, 1);
    blink_LED(sending, 10, 1);
    while (i<4){
 242:	c4 30       	cpi	r28, 0x04	; 4
 244:	81 f7       	brne	.-32     	; 0x226 <main+0x34>
 246:	c4 e6       	ldi	r28, 0x64	; 100
 248:	d0 e0       	ldi	r29, 0x00	; 0

    }
    // Repeat indefinitely
    for (;;) //forever
    {
        blink_LED(receiving, 10, 1);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e8       	ldi	r20, 0x80	; 128
 250:	5f e3       	ldi	r21, 0x3F	; 63
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 39 00 	call	0x72	; 0x72 <blink_LED>
        //Echo received characters
        u8Data = USART_vReceiveByte();
 25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_vReceiveByte>

        if(u8Data == 0xAA)
 262:	8a 3a       	cpi	r24, 0xAA	; 170
 264:	19 f0       	breq	.+6      	; 0x26c <main+0x7a>
        {
            blink_LED(receiving, 10, 1);
            u8Data = USART_vReceiveByte();
            //PORTB = u8Data;
            USART_vSendChar('a');
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	97 e2       	ldi	r25, 0x27	; 39
 26a:	17 c0       	rjmp	.+46     	; 0x29a <main+0xa8>
        //Echo received characters
        u8Data = USART_vReceiveByte();

        if(u8Data == 0xAA)
        {
            blink_LED(receiving, 10, 1);
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	40 e8       	ldi	r20, 0x80	; 128
 272:	5f e3       	ldi	r21, 0x3F	; 63
 274:	6a e0       	ldi	r22, 0x0A	; 10
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 39 00 	call	0x72	; 0x72 <blink_LED>
            u8Data = USART_vReceiveByte();
 280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_vReceiveByte>
            //PORTB = u8Data;
            USART_vSendChar('a');
 284:	81 e6       	ldi	r24, 0x61	; 97
 286:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <USART_vSendChar>
 28a:	80 e1       	ldi	r24, 0x10	; 16
 28c:	97 e2       	ldi	r25, 0x27	; 39
 28e:	fe 01       	movw	r30, r28
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x9e>
 294:	01 97       	sbiw	r24, 0x01	; 1
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	d9 f7       	brne	.-10     	; 0x28e <main+0x9c>
 298:	e6 cf       	rjmp	.-52     	; 0x266 <main+0x74>
 29a:	fe 01       	movw	r30, r28
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0xaa>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	d9 f7       	brne	.-10     	; 0x29a <main+0xa8>
 2a4:	d2 cf       	rjmp	.-92     	; 0x24a <main+0x58>

000002a6 <__cmpsf2>:
 2a6:	71 d0       	rcall	.+226    	; 0x38a <__fp_cmp>
 2a8:	08 f4       	brcc	.+2      	; 0x2ac <__cmpsf2+0x6>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret

000002ae <__fixsfsi>:
 2ae:	04 d0       	rcall	.+8      	; 0x2b8 <__fixunssfsi>
 2b0:	68 94       	set
 2b2:	b1 11       	cpse	r27, r1
 2b4:	b1 c0       	rjmp	.+354    	; 0x418 <__fp_szero>
 2b6:	08 95       	ret

000002b8 <__fixunssfsi>:
 2b8:	94 d0       	rcall	.+296    	; 0x3e2 <__fp_splitA>
 2ba:	88 f0       	brcs	.+34     	; 0x2de <__fixunssfsi+0x26>
 2bc:	9f 57       	subi	r25, 0x7F	; 127
 2be:	90 f0       	brcs	.+36     	; 0x2e4 <__fixunssfsi+0x2c>
 2c0:	b9 2f       	mov	r27, r25
 2c2:	99 27       	eor	r25, r25
 2c4:	b7 51       	subi	r27, 0x17	; 23
 2c6:	a0 f0       	brcs	.+40     	; 0x2f0 <__fixunssfsi+0x38>
 2c8:	d1 f0       	breq	.+52     	; 0x2fe <__fixunssfsi+0x46>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a f0       	brmi	.+6      	; 0x2da <__fixunssfsi+0x22>
 2d4:	ba 95       	dec	r27
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <__fixunssfsi+0x12>
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <__fixunssfsi+0x46>
 2da:	b1 30       	cpi	r27, 0x01	; 1
 2dc:	81 f0       	breq	.+32     	; 0x2fe <__fixunssfsi+0x46>
 2de:	9b d0       	rcall	.+310    	; 0x416 <__fp_zero>
 2e0:	b1 e0       	ldi	r27, 0x01	; 1
 2e2:	08 95       	ret
 2e4:	98 c0       	rjmp	.+304    	; 0x416 <__fp_zero>
 2e6:	67 2f       	mov	r22, r23
 2e8:	78 2f       	mov	r23, r24
 2ea:	88 27       	eor	r24, r24
 2ec:	b8 5f       	subi	r27, 0xF8	; 248
 2ee:	39 f0       	breq	.+14     	; 0x2fe <__fixunssfsi+0x46>
 2f0:	b9 3f       	cpi	r27, 0xF9	; 249
 2f2:	cc f3       	brlt	.-14     	; 0x2e6 <__fixunssfsi+0x2e>
 2f4:	86 95       	lsr	r24
 2f6:	77 95       	ror	r23
 2f8:	67 95       	ror	r22
 2fa:	b3 95       	inc	r27
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <__fixunssfsi+0x3c>
 2fe:	3e f4       	brtc	.+14     	; 0x30e <__fixunssfsi+0x56>
 300:	90 95       	com	r25
 302:	80 95       	com	r24
 304:	70 95       	com	r23
 306:	61 95       	neg	r22
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	08 95       	ret

00000310 <__floatunsisf>:
 310:	e8 94       	clt
 312:	09 c0       	rjmp	.+18     	; 0x326 <__floatsisf+0x12>

00000314 <__floatsisf>:
 314:	97 fb       	bst	r25, 7
 316:	3e f4       	brtc	.+14     	; 0x326 <__floatsisf+0x12>
 318:	90 95       	com	r25
 31a:	80 95       	com	r24
 31c:	70 95       	com	r23
 31e:	61 95       	neg	r22
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	8f 4f       	sbci	r24, 0xFF	; 255
 324:	9f 4f       	sbci	r25, 0xFF	; 255
 326:	99 23       	and	r25, r25
 328:	a9 f0       	breq	.+42     	; 0x354 <__floatsisf+0x40>
 32a:	f9 2f       	mov	r31, r25
 32c:	96 e9       	ldi	r25, 0x96	; 150
 32e:	bb 27       	eor	r27, r27
 330:	93 95       	inc	r25
 332:	f6 95       	lsr	r31
 334:	87 95       	ror	r24
 336:	77 95       	ror	r23
 338:	67 95       	ror	r22
 33a:	b7 95       	ror	r27
 33c:	f1 11       	cpse	r31, r1
 33e:	f8 cf       	rjmp	.-16     	; 0x330 <__floatsisf+0x1c>
 340:	fa f4       	brpl	.+62     	; 0x380 <__floatsisf+0x6c>
 342:	bb 0f       	add	r27, r27
 344:	11 f4       	brne	.+4      	; 0x34a <__floatsisf+0x36>
 346:	60 ff       	sbrs	r22, 0
 348:	1b c0       	rjmp	.+54     	; 0x380 <__floatsisf+0x6c>
 34a:	6f 5f       	subi	r22, 0xFF	; 255
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	16 c0       	rjmp	.+44     	; 0x380 <__floatsisf+0x6c>
 354:	88 23       	and	r24, r24
 356:	11 f0       	breq	.+4      	; 0x35c <__floatsisf+0x48>
 358:	96 e9       	ldi	r25, 0x96	; 150
 35a:	11 c0       	rjmp	.+34     	; 0x37e <__floatsisf+0x6a>
 35c:	77 23       	and	r23, r23
 35e:	21 f0       	breq	.+8      	; 0x368 <__floatsisf+0x54>
 360:	9e e8       	ldi	r25, 0x8E	; 142
 362:	87 2f       	mov	r24, r23
 364:	76 2f       	mov	r23, r22
 366:	05 c0       	rjmp	.+10     	; 0x372 <__floatsisf+0x5e>
 368:	66 23       	and	r22, r22
 36a:	71 f0       	breq	.+28     	; 0x388 <__floatsisf+0x74>
 36c:	96 e8       	ldi	r25, 0x86	; 134
 36e:	86 2f       	mov	r24, r22
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	2a f0       	brmi	.+10     	; 0x380 <__floatsisf+0x6c>
 376:	9a 95       	dec	r25
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	da f7       	brpl	.-10     	; 0x376 <__floatsisf+0x62>
 380:	88 0f       	add	r24, r24
 382:	96 95       	lsr	r25
 384:	87 95       	ror	r24
 386:	97 f9       	bld	r25, 7
 388:	08 95       	ret

0000038a <__fp_cmp>:
 38a:	99 0f       	add	r25, r25
 38c:	00 08       	sbc	r0, r0
 38e:	55 0f       	add	r21, r21
 390:	aa 0b       	sbc	r26, r26
 392:	e0 e8       	ldi	r30, 0x80	; 128
 394:	fe ef       	ldi	r31, 0xFE	; 254
 396:	16 16       	cp	r1, r22
 398:	17 06       	cpc	r1, r23
 39a:	e8 07       	cpc	r30, r24
 39c:	f9 07       	cpc	r31, r25
 39e:	c0 f0       	brcs	.+48     	; 0x3d0 <__fp_cmp+0x46>
 3a0:	12 16       	cp	r1, r18
 3a2:	13 06       	cpc	r1, r19
 3a4:	e4 07       	cpc	r30, r20
 3a6:	f5 07       	cpc	r31, r21
 3a8:	98 f0       	brcs	.+38     	; 0x3d0 <__fp_cmp+0x46>
 3aa:	62 1b       	sub	r22, r18
 3ac:	73 0b       	sbc	r23, r19
 3ae:	84 0b       	sbc	r24, r20
 3b0:	95 0b       	sbc	r25, r21
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <__fp_cmp+0x38>
 3b4:	0a 26       	eor	r0, r26
 3b6:	61 f0       	breq	.+24     	; 0x3d0 <__fp_cmp+0x46>
 3b8:	23 2b       	or	r18, r19
 3ba:	24 2b       	or	r18, r20
 3bc:	25 2b       	or	r18, r21
 3be:	21 f4       	brne	.+8      	; 0x3c8 <__fp_cmp+0x3e>
 3c0:	08 95       	ret
 3c2:	0a 26       	eor	r0, r26
 3c4:	09 f4       	brne	.+2      	; 0x3c8 <__fp_cmp+0x3e>
 3c6:	a1 40       	sbci	r26, 0x01	; 1
 3c8:	a6 95       	lsr	r26
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	81 1d       	adc	r24, r1
 3ce:	81 1d       	adc	r24, r1
 3d0:	08 95       	ret

000003d2 <__fp_split3>:
 3d2:	57 fd       	sbrc	r21, 7
 3d4:	90 58       	subi	r25, 0x80	; 128
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	59 f0       	breq	.+22     	; 0x3f2 <__fp_splitA+0x10>
 3dc:	5f 3f       	cpi	r21, 0xFF	; 255
 3de:	71 f0       	breq	.+28     	; 0x3fc <__fp_splitA+0x1a>
 3e0:	47 95       	ror	r20

000003e2 <__fp_splitA>:
 3e2:	88 0f       	add	r24, r24
 3e4:	97 fb       	bst	r25, 7
 3e6:	99 1f       	adc	r25, r25
 3e8:	61 f0       	breq	.+24     	; 0x402 <__fp_splitA+0x20>
 3ea:	9f 3f       	cpi	r25, 0xFF	; 255
 3ec:	79 f0       	breq	.+30     	; 0x40c <__fp_splitA+0x2a>
 3ee:	87 95       	ror	r24
 3f0:	08 95       	ret
 3f2:	12 16       	cp	r1, r18
 3f4:	13 06       	cpc	r1, r19
 3f6:	14 06       	cpc	r1, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <__fp_split3+0xe>
 3fc:	46 95       	lsr	r20
 3fe:	f1 df       	rcall	.-30     	; 0x3e2 <__fp_splitA>
 400:	08 c0       	rjmp	.+16     	; 0x412 <__fp_splitA+0x30>
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	18 06       	cpc	r1, r24
 408:	99 1f       	adc	r25, r25
 40a:	f1 cf       	rjmp	.-30     	; 0x3ee <__fp_splitA+0xc>
 40c:	86 95       	lsr	r24
 40e:	71 05       	cpc	r23, r1
 410:	61 05       	cpc	r22, r1
 412:	08 94       	sec
 414:	08 95       	ret

00000416 <__fp_zero>:
 416:	e8 94       	clt

00000418 <__fp_szero>:
 418:	bb 27       	eor	r27, r27
 41a:	66 27       	eor	r22, r22
 41c:	77 27       	eor	r23, r23
 41e:	cb 01       	movw	r24, r22
 420:	97 f9       	bld	r25, 7
 422:	08 95       	ret

00000424 <__gesf2>:
 424:	b2 df       	rcall	.-156    	; 0x38a <__fp_cmp>
 426:	08 f4       	brcc	.+2      	; 0x42a <__gesf2+0x6>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	08 95       	ret

0000042c <__mulsf3>:
 42c:	0b d0       	rcall	.+22     	; 0x444 <__mulsf3x>
 42e:	78 c0       	rjmp	.+240    	; 0x520 <__fp_round>
 430:	69 d0       	rcall	.+210    	; 0x504 <__fp_pscA>
 432:	28 f0       	brcs	.+10     	; 0x43e <__mulsf3+0x12>
 434:	6e d0       	rcall	.+220    	; 0x512 <__fp_pscB>
 436:	18 f0       	brcs	.+6      	; 0x43e <__mulsf3+0x12>
 438:	95 23       	and	r25, r21
 43a:	09 f0       	breq	.+2      	; 0x43e <__mulsf3+0x12>
 43c:	5a c0       	rjmp	.+180    	; 0x4f2 <__fp_inf>
 43e:	5f c0       	rjmp	.+190    	; 0x4fe <__fp_nan>
 440:	11 24       	eor	r1, r1
 442:	ea cf       	rjmp	.-44     	; 0x418 <__fp_szero>

00000444 <__mulsf3x>:
 444:	c6 df       	rcall	.-116    	; 0x3d2 <__fp_split3>
 446:	a0 f3       	brcs	.-24     	; 0x430 <__mulsf3+0x4>

00000448 <__mulsf3_pse>:
 448:	95 9f       	mul	r25, r21
 44a:	d1 f3       	breq	.-12     	; 0x440 <__mulsf3+0x14>
 44c:	95 0f       	add	r25, r21
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	55 1f       	adc	r21, r21
 452:	62 9f       	mul	r22, r18
 454:	f0 01       	movw	r30, r0
 456:	72 9f       	mul	r23, r18
 458:	bb 27       	eor	r27, r27
 45a:	f0 0d       	add	r31, r0
 45c:	b1 1d       	adc	r27, r1
 45e:	63 9f       	mul	r22, r19
 460:	aa 27       	eor	r26, r26
 462:	f0 0d       	add	r31, r0
 464:	b1 1d       	adc	r27, r1
 466:	aa 1f       	adc	r26, r26
 468:	64 9f       	mul	r22, r20
 46a:	66 27       	eor	r22, r22
 46c:	b0 0d       	add	r27, r0
 46e:	a1 1d       	adc	r26, r1
 470:	66 1f       	adc	r22, r22
 472:	82 9f       	mul	r24, r18
 474:	22 27       	eor	r18, r18
 476:	b0 0d       	add	r27, r0
 478:	a1 1d       	adc	r26, r1
 47a:	62 1f       	adc	r22, r18
 47c:	73 9f       	mul	r23, r19
 47e:	b0 0d       	add	r27, r0
 480:	a1 1d       	adc	r26, r1
 482:	62 1f       	adc	r22, r18
 484:	83 9f       	mul	r24, r19
 486:	a0 0d       	add	r26, r0
 488:	61 1d       	adc	r22, r1
 48a:	22 1f       	adc	r18, r18
 48c:	74 9f       	mul	r23, r20
 48e:	33 27       	eor	r19, r19
 490:	a0 0d       	add	r26, r0
 492:	61 1d       	adc	r22, r1
 494:	23 1f       	adc	r18, r19
 496:	84 9f       	mul	r24, r20
 498:	60 0d       	add	r22, r0
 49a:	21 1d       	adc	r18, r1
 49c:	82 2f       	mov	r24, r18
 49e:	76 2f       	mov	r23, r22
 4a0:	6a 2f       	mov	r22, r26
 4a2:	11 24       	eor	r1, r1
 4a4:	9f 57       	subi	r25, 0x7F	; 127
 4a6:	50 40       	sbci	r21, 0x00	; 0
 4a8:	8a f0       	brmi	.+34     	; 0x4cc <__mulsf3_pse+0x84>
 4aa:	e1 f0       	breq	.+56     	; 0x4e4 <__mulsf3_pse+0x9c>
 4ac:	88 23       	and	r24, r24
 4ae:	4a f0       	brmi	.+18     	; 0x4c2 <__mulsf3_pse+0x7a>
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	bb 1f       	adc	r27, r27
 4b6:	66 1f       	adc	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	50 40       	sbci	r21, 0x00	; 0
 4c0:	a9 f7       	brne	.-22     	; 0x4ac <__mulsf3_pse+0x64>
 4c2:	9e 3f       	cpi	r25, 0xFE	; 254
 4c4:	51 05       	cpc	r21, r1
 4c6:	70 f0       	brcs	.+28     	; 0x4e4 <__mulsf3_pse+0x9c>
 4c8:	14 c0       	rjmp	.+40     	; 0x4f2 <__fp_inf>
 4ca:	a6 cf       	rjmp	.-180    	; 0x418 <__fp_szero>
 4cc:	5f 3f       	cpi	r21, 0xFF	; 255
 4ce:	ec f3       	brlt	.-6      	; 0x4ca <__mulsf3_pse+0x82>
 4d0:	98 3e       	cpi	r25, 0xE8	; 232
 4d2:	dc f3       	brlt	.-10     	; 0x4ca <__mulsf3_pse+0x82>
 4d4:	86 95       	lsr	r24
 4d6:	77 95       	ror	r23
 4d8:	67 95       	ror	r22
 4da:	b7 95       	ror	r27
 4dc:	f7 95       	ror	r31
 4de:	e7 95       	ror	r30
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	c1 f7       	brne	.-16     	; 0x4d4 <__mulsf3_pse+0x8c>
 4e4:	fe 2b       	or	r31, r30
 4e6:	88 0f       	add	r24, r24
 4e8:	91 1d       	adc	r25, r1
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret

000004f2 <__fp_inf>:
 4f2:	97 f9       	bld	r25, 7
 4f4:	9f 67       	ori	r25, 0x7F	; 127
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	08 95       	ret

000004fe <__fp_nan>:
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	80 ec       	ldi	r24, 0xC0	; 192
 502:	08 95       	ret

00000504 <__fp_pscA>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	16 16       	cp	r1, r22
 50a:	17 06       	cpc	r1, r23
 50c:	18 06       	cpc	r1, r24
 50e:	09 06       	cpc	r0, r25
 510:	08 95       	ret

00000512 <__fp_pscB>:
 512:	00 24       	eor	r0, r0
 514:	0a 94       	dec	r0
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	05 06       	cpc	r0, r21
 51e:	08 95       	ret

00000520 <__fp_round>:
 520:	09 2e       	mov	r0, r25
 522:	03 94       	inc	r0
 524:	00 0c       	add	r0, r0
 526:	11 f4       	brne	.+4      	; 0x52c <__fp_round+0xc>
 528:	88 23       	and	r24, r24
 52a:	52 f0       	brmi	.+20     	; 0x540 <__fp_round+0x20>
 52c:	bb 0f       	add	r27, r27
 52e:	40 f4       	brcc	.+16     	; 0x540 <__fp_round+0x20>
 530:	bf 2b       	or	r27, r31
 532:	11 f4       	brne	.+4      	; 0x538 <__fp_round+0x18>
 534:	60 ff       	sbrs	r22, 0
 536:	04 c0       	rjmp	.+8      	; 0x540 <__fp_round+0x20>
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__divmodhi4>:
 542:	97 fb       	bst	r25, 7
 544:	07 2e       	mov	r0, r23
 546:	16 f4       	brtc	.+4      	; 0x54c <__divmodhi4+0xa>
 548:	00 94       	com	r0
 54a:	07 d0       	rcall	.+14     	; 0x55a <__divmodhi4_neg1>
 54c:	77 fd       	sbrc	r23, 7
 54e:	09 d0       	rcall	.+18     	; 0x562 <__divmodhi4_neg2>
 550:	0e 94 b5 02 	call	0x56a	; 0x56a <__udivmodhi4>
 554:	07 fc       	sbrc	r0, 7
 556:	05 d0       	rcall	.+10     	; 0x562 <__divmodhi4_neg2>
 558:	3e f4       	brtc	.+14     	; 0x568 <__divmodhi4_exit>

0000055a <__divmodhi4_neg1>:
 55a:	90 95       	com	r25
 55c:	81 95       	neg	r24
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <__divmodhi4_neg2>:
 562:	70 95       	com	r23
 564:	61 95       	neg	r22
 566:	7f 4f       	sbci	r23, 0xFF	; 255

00000568 <__divmodhi4_exit>:
 568:	08 95       	ret

0000056a <__udivmodhi4>:
 56a:	aa 1b       	sub	r26, r26
 56c:	bb 1b       	sub	r27, r27
 56e:	51 e1       	ldi	r21, 0x11	; 17
 570:	07 c0       	rjmp	.+14     	; 0x580 <__udivmodhi4_ep>

00000572 <__udivmodhi4_loop>:
 572:	aa 1f       	adc	r26, r26
 574:	bb 1f       	adc	r27, r27
 576:	a6 17       	cp	r26, r22
 578:	b7 07       	cpc	r27, r23
 57a:	10 f0       	brcs	.+4      	; 0x580 <__udivmodhi4_ep>
 57c:	a6 1b       	sub	r26, r22
 57e:	b7 0b       	sbc	r27, r23

00000580 <__udivmodhi4_ep>:
 580:	88 1f       	adc	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	5a 95       	dec	r21
 586:	a9 f7       	brne	.-22     	; 0x572 <__udivmodhi4_loop>
 588:	80 95       	com	r24
 58a:	90 95       	com	r25
 58c:	bc 01       	movw	r22, r24
 58e:	cd 01       	movw	r24, r26
 590:	08 95       	ret

00000592 <_exit>:
 592:	f8 94       	cli

00000594 <__stop_program>:
 594:	ff cf       	rjmp	.-2      	; 0x594 <__stop_program>
