
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000012e  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e1  00000000  00000000  00000993  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000095  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000a7  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001e  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_vInit>:
void USART_vInit(void){

    //set baud rate
    //UBRRH = (unsigned char)(103>>8);
    //UBRRL = (unsigned char) 103;
    UBRRH = (unsigned char)(103 >>8);
  6c:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char) 103;
  6e:	87 e6       	ldi	r24, 0x67	; 103
  70:	89 b9       	out	0x09, r24	; 9

    // enable receiver and transmitter
    UCSRB = (1<<RXEN) | (1<<TXEN);
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
    
    // Set frame format to 8 data bits, no parity, 1 stop bit
    UCSRC = (1<<URSEL) | (3<<UCSZ0) | (1<<USBS);
  76:	8e e8       	ldi	r24, 0x8E	; 142
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <USART_Transmit>:
}

void USART_Transmit (unsigned int data)
{
    //Wait until the Transmitter is ready
    while (! (UCSRA & (1 << UDRE)) ); 
  7c:	5d 9b       	sbis	0x0b, 5	; 11
  7e:	fe cf       	rjmp	.-4      	; 0x7c <USART_Transmit>
    
    //Make the 9th bit 0 for the moment
    UCSRB &=~(1 << TXB8); 
  80:	50 98       	cbi	0x0a, 0	; 10
    
    //If the 9th bit of the data is a 1
    if (data & 0x0100) 
  82:	90 fd       	sbrc	r25, 0
    
    //Set the TXB8 bit to 1
    UCSRB |= (1 << TXB8); 
  84:	50 9a       	sbi	0x0a, 0	; 10
    
    //Get that data outa here!
    UDR = data;
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <USART_Receive>:
    }

unsigned char USART_Receive( void )
{
    while ( !(UCSRA & (1 << RXC)) ); //Wait for the RXC to not have 0
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <USART_Receive>
    return UDR; //Get that data outa there and back to the main program!
  8e:	8c b1       	in	r24, 0x0c	; 12
}
  90:	08 95       	ret

00000092 <main>:

int main (void) {
    DDRB = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
    uint8_t u8Data;

    // Initialize USART
    USART_vInit();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <USART_vInit>

    // Send string
    USART_Transmit(1);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 3e 00 	call	0x7c	; 0x7c <USART_Transmit>

    // Repeat indefinitely
    for (;;) //forever
    {
        //Echo received characters
        u8Data = USART_Receive();
  a2:	0e 94 45 00 	call	0x8a	; 0x8a <USART_Receive>

        if(u8Data == 0xAA)
  a6:	8a 3a       	cpi	r24, 0xAA	; 170
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x10>
        {
            u8Data = USART_Receive();
  aa:	0e 94 45 00 	call	0x8a	; 0x8a <USART_Receive>
            PORTB = u8Data;
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	f8 cf       	rjmp	.-16     	; 0xa2 <main+0x10>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
