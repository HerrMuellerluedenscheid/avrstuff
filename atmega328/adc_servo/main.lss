
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002bb  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000e9  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000111  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setup_PWM>:
void setup_PWM(){
    DDRD |= 0xFF;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	81 bb       	out	0x11, r24	; 17
    TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  72:	8f b5       	in	r24, 0x2f	; 47
  74:	82 6c       	ori	r24, 0xC2	; 194
  76:	8f bd       	out	0x2f, r24	; 47
    TCCR1B |= 1<<WGM12 | 1<<WGM13 | 1<<CS10;
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	89 61       	ori	r24, 0x19	; 25
  7c:	8e bd       	out	0x2e, r24	; 46
    ICR1 = 19999;
  7e:	8f e1       	ldi	r24, 0x1F	; 31
  80:	9e e4       	ldi	r25, 0x4E	; 78
  82:	97 bd       	out	0x27, r25	; 39
  84:	86 bd       	out	0x26, r24	; 38
  86:	08 95       	ret

00000088 <set_PWM_percent>:
}
void set_PWM_percent(int percent, int max_left, int max_right){
    OCR1A = ICR1 - percent*10;
  88:	26 b5       	in	r18, 0x26	; 38
  8a:	37 b5       	in	r19, 0x27	; 39
  8c:	46 ef       	ldi	r20, 0xF6	; 246
  8e:	bc 01       	movw	r22, r24
  90:	46 03       	mulsu	r20, r22
  92:	c0 01       	movw	r24, r0
  94:	47 9f       	mul	r20, r23
  96:	90 0d       	add	r25, r0
  98:	11 24       	eor	r1, r1
  9a:	82 0f       	add	r24, r18
  9c:	93 1f       	adc	r25, r19
  9e:	9b bd       	out	0x2b, r25	; 43
  a0:	8a bd       	out	0x2a, r24	; 42
  a2:	08 95       	ret

000000a4 <main>:

int main (void) {

    
    // init PWM:
    setup_PWM();
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <setup_PWM>
    void ADC_Init(void){
        // AVCC as reference voltage
        ADMUX |= (1<<REFS0);
  a8:	3e 9a       	sbi	0x07, 6	; 7
        //ADMUX |= 1<<MUX2;
        //SFIOR |= 1<<ACME;
        // ADFR (free running)
        ADCSRA |= 1<<ADPS2;  // Frequenvorteiler
  aa:	32 9a       	sbi	0x06, 2	; 6
        
        // Testweise nur 8 bit conversion:
        ADMUX |= 1<<ADLAR;
  ac:	3d 9a       	sbi	0x07, 5	; 7

        // enable interrupts:
        ADCSRA |= 1<<ADIE;
  ae:	33 9a       	sbi	0x06, 3	; 6

        ADCSRA |= 1<<ADEN;
  b0:	37 9a       	sbi	0x06, 7	; 6
        
        // enable interrupts:
        //sei();
        
        // Dummy conversion
        ADCSRA |= (1<<ADSC);
  b2:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f e3       	ldi	r18, 0x3F	; 63
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x16>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x20>
  c4:	00 00       	nop
  c6:	87 ea       	ldi	r24, 0xA7	; 167
  c8:	91 e6       	ldi	r25, 0x61	; 97
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x26>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2c>
  d0:	00 00       	nop
  d2:	86 b5       	in	r24, 0x26	; 38
  d4:	97 b5       	in	r25, 0x27	; 39
  d6:	88 58       	subi	r24, 0x88	; 136
  d8:	93 41       	sbci	r25, 0x13	; 19
  da:	9b bd       	out	0x2b, r25	; 43
  dc:	8a bd       	out	0x2a, r24	; 42
  de:	87 ea       	ldi	r24, 0xA7	; 167
  e0:	91 e6       	ldi	r25, 0x61	; 97
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x3e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x44>
  e8:	00 00       	nop
        
        set_PWM_percent(500, 1000, 2000);
        
        _delay_ms(100);
        // starte conversion
        ADCSRA |= (1<<ADSC);
  ea:	36 9a       	sbi	0x06, 6	; 6
  ec:	87 ea       	ldi	r24, 0xA7	; 167
  ee:	91 e6       	ldi	r25, 0x61	; 97
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x4c>
  f4:	e6 cf       	rjmp	.-52     	; 0xc2 <main+0x1e>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
