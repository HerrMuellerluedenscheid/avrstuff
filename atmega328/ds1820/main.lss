
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000ef4  00000f68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ef4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00003984  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e4c  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000022  00000000  00000000  00005754  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00005776  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  000057be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000046a  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  00006b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00006e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000284  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <main>
  8e:	0c 94 78 07 	jmp	0xef0	; 0xef0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_write_4>:
    lcd_write_4(theInstructions);
    lcd_write_4(theInstructions << 4);
}

void lcd_write_4(uint8_t theByte) {
    lcd_D7_port &= ~ (1<<lcd_D7_bit);
  96:	28 98       	cbi	0x05, 0	; 5
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);
  98:	87 fd       	sbrc	r24, 7
  9a:	28 9a       	sbi	0x05, 0	; 5
    
    lcd_D6_port &= ~ (1<<lcd_D6_bit);
  9c:	2a 98       	cbi	0x05, 2	; 5
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
  9e:	86 fd       	sbrc	r24, 6
  a0:	2a 9a       	sbi	0x05, 2	; 5
    
    lcd_D5_port &= ~ (1<<lcd_D5_bit);
  a2:	29 98       	cbi	0x05, 1	; 5
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
  a4:	85 fd       	sbrc	r24, 5
  a6:	29 9a       	sbi	0x05, 1	; 5
    
    lcd_D4_port &= ~ (1<<lcd_D4_bit);
  a8:	5c 98       	cbi	0x0b, 4	; 11
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
  aa:	84 fd       	sbrc	r24, 4
  ac:	5c 9a       	sbi	0x0b, 4	; 11

    lcd_E_port |= (1<<lcd_E_bit);
  ae:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	00 00       	nop
    _delay_us(1);

    lcd_E_port &= ~ (1<<lcd_E_bit);
  b2:	43 98       	cbi	0x08, 3	; 8
  b4:	00 00       	nop
  b6:	08 95       	ret

000000b8 <lcd_write_instructions_4d>:
    lcd_E_port &= ~(1<<lcd_E_bit);
    lcd_write_4(theData);
    lcd_write_4(theData << 4);
}

void lcd_write_instructions_4d(uint8_t theInstructions){
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
    lcd_RS_port &= ~(1<<lcd_RS_bit);
  bc:	45 98       	cbi	0x08, 5	; 8
    lcd_E_port &= ~(1<<lcd_E_bit);
  be:	43 98       	cbi	0x08, 3	; 8
    lcd_write_4(theInstructions);
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
    lcd_write_4(theInstructions << 4);
  c4:	8c 2f       	mov	r24, r28
  c6:	82 95       	swap	r24
  c8:	80 7f       	andi	r24, 0xF0	; 240
}
  ca:	cf 91       	pop	r28

void lcd_write_instructions_4d(uint8_t theInstructions){
    lcd_RS_port &= ~(1<<lcd_RS_bit);
    lcd_E_port &= ~(1<<lcd_E_bit);
    lcd_write_4(theInstructions);
    lcd_write_4(theInstructions << 4);
  cc:	0c 94 4b 00 	jmp	0x96	; 0x96 <lcd_write_4>

000000d0 <lcd_write_character_4d>:
        i++;
        _delay_us(80);
    }
}

void lcd_write_character_4d(uint8_t theData){
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
    lcd_RS_port |= (1<<lcd_RS_bit);
  d4:	45 9a       	sbi	0x08, 5	; 8
    lcd_E_port &= ~(1<<lcd_E_bit);
  d6:	43 98       	cbi	0x08, 3	; 8
    lcd_write_4(theData);
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
    lcd_write_4(theData << 4);
  dc:	8c 2f       	mov	r24, r28
  de:	82 95       	swap	r24
  e0:	80 7f       	andi	r24, 0xF0	; 240
}
  e2:	cf 91       	pop	r28

void lcd_write_character_4d(uint8_t theData){
    lcd_RS_port |= (1<<lcd_RS_bit);
    lcd_E_port &= ~(1<<lcd_E_bit);
    lcd_write_4(theData);
    lcd_write_4(theData << 4);
  e4:	0c 94 4b 00 	jmp	0x96	; 0x96 <lcd_write_4>

000000e8 <lcd_write_string_4d>:
    lcd_write_instructions_4d(lcd_Clear);
    lcd_write_instructions_4d(lcd_SetCursor | lcd_LineOne);
    _delay_ms(4);
}

void lcd_write_string_4d(uint8_t theString[]) {
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	00 d0       	rcall	.+0      	; 0xf2 <lcd_write_string_4d+0xa>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	8c 01       	movw	r16, r24
    volatile int i = 0;
  f8:	1a 82       	std	Y+2, r1	; 0x02
  fa:	19 82       	std	Y+1, r1	; 0x01
    while (theString[i] != 0)
  fc:	11 c0       	rjmp	.+34     	; 0x120 <lcd_write_string_4d+0x38>
    {
        lcd_write_character_4d(theString[i]);
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	e0 0f       	add	r30, r16
 104:	f1 1f       	adc	r31, r17
 106:	80 81       	ld	r24, Z
 108:	0e 94 68 00 	call	0xd0	; 0xd0 <lcd_write_character_4d>
        i++;
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	3a 81       	ldd	r19, Y+2	; 0x02
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	3a 83       	std	Y+2, r19	; 0x02
 116:	29 83       	std	Y+1, r18	; 0x01
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_write_string_4d+0x32>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_write_string_4d+0x38>
    _delay_ms(4);
}

void lcd_write_string_4d(uint8_t theString[]) {
    volatile int i = 0;
    while (theString[i] != 0)
 120:	e9 81       	ldd	r30, Y+1	; 0x01
 122:	fa 81       	ldd	r31, Y+2	; 0x02
 124:	e0 0f       	add	r30, r16
 126:	f1 1f       	adc	r31, r17
 128:	80 81       	ld	r24, Z
 12a:	81 11       	cpse	r24, r1
 12c:	e8 cf       	rjmp	.-48     	; 0xfe <lcd_write_string_4d+0x16>
    {
        lcd_write_character_4d(theString[i]);
        i++;
        _delay_us(80);
    }
}
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <lcd_write_hold_clear>:
    _delay_us(80);
    lcd_write_instructions_4d(lcd_DisplayOn);
    _delay_us(80);
}

void lcd_write_hold_clear(uint8_t theString[], float time) {
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	6a 01       	movw	r12, r20
 146:	7b 01       	movw	r14, r22
    uint8_t i;
    lcd_write_string_4d(theString);
 148:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_write_string_4d>
    uint8_t circles = time*1000;
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4a e7       	ldi	r20, 0x7A	; 122
 152:	54 e4       	ldi	r21, 0x44	; 68
 154:	c7 01       	movw	r24, r14
 156:	b6 01       	movw	r22, r12
 158:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 15c:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
    for (i=0; i<circles; i++){
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	07 c0       	rjmp	.+14     	; 0x172 <lcd_write_hold_clear+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	e3 ec       	ldi	r30, 0xC3	; 195
 166:	f9 e0       	ldi	r31, 0x09	; 9
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_write_hold_clear+0x2c>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_write_hold_clear+0x32>
 16e:	00 00       	nop
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	86 13       	cpse	r24, r22
 174:	f7 cf       	rjmp	.-18     	; 0x164 <lcd_write_hold_clear+0x28>
        _delay_ms(10);
    }
    lcd_write_instructions_4d(lcd_Clear);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
    lcd_write_instructions_4d(lcd_SetCursor | lcd_LineOne);
 17c:	80 e8       	ldi	r24, 0x80	; 128
 17e:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
 182:	87 ee       	ldi	r24, 0xE7	; 231
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_write_hold_clear+0x4a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_write_hold_clear+0x50>
 18c:	00 00       	nop
    _delay_ms(4);
}
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

00000198 <lcd_init_4d>:
 198:	87 ea       	ldi	r24, 0xA7	; 167
 19a:	91 e6       	ldi	r25, 0x61	; 97
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_init_4d+0x4>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_init_4d+0xa>
 1a2:	00 00       	nop
void lcd_write_hold_clear(uint8_t *, float);


void lcd_init_4d(void){
    _delay_ms(100);  // powerup delay
    lcd_RS_port &= ~(1<<lcd_RS_bit);
 1a4:	45 98       	cbi	0x08, 5	; 8
    lcd_E_port &= ~(1<<lcd_E_bit);
 1a6:	43 98       	cbi	0x08, 3	; 8

    lcd_write_4(lcd_FunctionReset);
 1a8:	88 e1       	ldi	r24, 0x18	; 24
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 1ae:	83 ec       	ldi	r24, 0xC3	; 195
 1b0:	99 e0       	ldi	r25, 0x09	; 9
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init_4d+0x1a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init_4d+0x20>
 1b8:	00 00       	nop
    _delay_ms(10);
    lcd_write_4(lcd_FunctionReset);
 1ba:	88 e1       	ldi	r24, 0x18	; 24
 1bc:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	92 e4       	ldi	r25, 0x42	; 66
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init_4d+0x2a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init_4d+0x30>
    _delay_us(200);
    lcd_write_4(lcd_FunctionReset);
 1c8:	88 e1       	ldi	r24, 0x18	; 24
 1ca:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 1ce:	82 e4       	ldi	r24, 0x42	; 66
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init_4d+0x38>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init_4d+0x3e>
    _delay_us(200);
    
    lcd_write_4(lcd_FunctionSet4bit);
 1d6:	88 e2       	ldi	r24, 0x28	; 40
 1d8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_write_4>
 1dc:	9a e1       	ldi	r25, 0x1A	; 26
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init_4d+0x46>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init_4d+0x4c>
    _delay_us(80);

    lcd_write_instructions_4d(lcd_Clear);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	87 ee       	ldi	r24, 0xE7	; 231
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init_4d+0x56>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_init_4d+0x5c>
 1f4:	00 00       	nop
    _delay_ms(4);
    lcd_write_instructions_4d(lcd_EntryMode);
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	9a e1       	ldi	r25, 0x1A	; 26
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init_4d+0x66>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init_4d+0x6c>
    _delay_us(80);
    lcd_write_instructions_4d(lcd_DisplayOn);
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
 20a:	8a e1       	ldi	r24, 0x1A	; 26
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init_4d+0x74>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_init_4d+0x7a>
 212:	08 95       	ret

00000214 <ADC_Init>:
#include <avr/interrupt.h>
#include <util/delay.h>


void ADC_Init(void){
    ADCSRA |= 1<<ADPS2;  // Frequenvorteiler
 214:	ea e7       	ldi	r30, 0x7A	; 122
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	80 83       	st	Z, r24
    // AVCC as reference voltage
    ADMUX |= (1<<REFS1);
 21e:	ac e7       	ldi	r26, 0x7C	; 124
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	8c 91       	ld	r24, X
 224:	80 68       	ori	r24, 0x80	; 128
 226:	8c 93       	st	X, r24
    ADCSRA |= 1<<ADIE;
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24

    ADCSRA |= 1<<ADEN;
 22e:	80 81       	ld	r24, Z
 230:	80 68       	ori	r24, 0x80	; 128
 232:	80 83       	st	Z, r24
     
    // Dummy conversion
    ADCSRA |= (1<<ADSC);
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <read_ADC>:
}

float read_ADC(void){
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	87 ea       	ldi	r24, 0xA7	; 167
 246:	91 e6       	ldi	r25, 0x61	; 97
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <read_ADC+0xc>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <read_ADC+0x12>
 24e:	00 00       	nop
    float poti_value;
    float frac;
    
    _delay_ms(100);
    ADCSRA |= (1<<ADSC);
 250:	80 91 7a 00 	lds	r24, 0x007A
 254:	80 64       	ori	r24, 0x40	; 64
 256:	80 93 7a 00 	sts	0x007A, r24
    while (!(ADCSRA & 0x10));
 25a:	80 91 7a 00 	lds	r24, 0x007A
 25e:	84 ff       	sbrs	r24, 4
 260:	fc cf       	rjmp	.-8      	; 0x25a <read_ADC+0x1e>
    
    poti_value = ADCL;
 262:	60 91 78 00 	lds	r22, 0x0078
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 8b 03 	call	0x716	; 0x716 <__floatunsisf>
 270:	8b 01       	movw	r16, r22
 272:	d8 2f       	mov	r29, r24
 274:	c9 2f       	mov	r28, r25
    poti_value += (ADCH<<8);
 276:	80 91 79 00 	lds	r24, 0x0079
 27a:	78 2f       	mov	r23, r24
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	88 27       	eor	r24, r24
 280:	77 fd       	sbrc	r23, 7
 282:	80 95       	com	r24
 284:	98 2f       	mov	r25, r24
 286:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatsisf>
 28a:	9b 01       	movw	r18, r22
 28c:	ac 01       	movw	r20, r24
 28e:	fe 01       	movw	r30, r28
 290:	60 2f       	mov	r22, r16
 292:	71 2f       	mov	r23, r17
 294:	8f 2f       	mov	r24, r31
 296:	9e 2f       	mov	r25, r30
 298:	0e 94 8a 02 	call	0x514	; 0x514 <__addsf3>
    
    frac = (float) poti_value/1023.;
 29c:	20 e0       	ldi	r18, 0x00	; 0
 29e:	30 ec       	ldi	r19, 0xC0	; 192
 2a0:	4f e7       	ldi	r20, 0x7F	; 127
 2a2:	54 e4       	ldi	r21, 0x44	; 68
 2a4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__divsf3>
    return frac;
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	08 95       	ret

000002b2 <heat>:

    return 0;
}

void heat(unsigned int doheat){
    if (doheat){
 2b2:	89 2b       	or	r24, r25
 2b4:	11 f0       	breq	.+4      	; 0x2ba <heat+0x8>
        BOILER_PORT |= (1<<BOILER_BIT);
 2b6:	5f 9a       	sbi	0x0b, 7	; 11
 2b8:	08 95       	ret
    }
    else{
        BOILER_PORT &= ~ (1<<BOILER_BIT);
 2ba:	5f 98       	cbi	0x0b, 7	; 11
 2bc:	08 95       	ret

000002be <ds18b20_reset>:
#include "ds18b20.h"

uint8_t ds18b20_reset(void){
    uint8_t i;

    DS18B20_PORT &= ~ (1<<DS18B20_DQ);
 2be:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1<<DS18B20_DQ);
 2c0:	38 9a       	sbi	0x07, 0	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	80 ea       	ldi	r24, 0xA0	; 160
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <ds18b20_reset+0x6>
    _delay_us(480);

    DS18B20_DDR &= ~(1<<DS18B20_DQ);
 2c8:	38 98       	cbi	0x07, 0	; 7
 2ca:	94 e1       	ldi	r25, 0x14	; 20
 2cc:	9a 95       	dec	r25
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <ds18b20_reset+0xe>
    _delay_us(60);

    i = (DS18B20_PIN & (1<<DS18B20_DQ));
 2d0:	86 b1       	in	r24, 0x06	; 6
 2d2:	9c e8       	ldi	r25, 0x8C	; 140
 2d4:	9a 95       	dec	r25
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <ds18b20_reset+0x16>
    _delay_us(420);
    
    //0 ok, 1 error
    return i;
}
 2d8:	81 70       	andi	r24, 0x01	; 1
 2da:	08 95       	ret

000002dc <ds18b20_writebit>:

void ds18b20_writebit(uint8_t bit){
    DS18B20_PORT &= ~ (1<<DS18B20_DQ);
 2dc:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1<<DS18B20_DQ);
 2de:	38 9a       	sbi	0x07, 0	; 7
 2e0:	00 00       	nop
    _delay_us(1);
    if(bit)
 2e2:	81 11       	cpse	r24, r1
        DS18B20_DDR &= ~(1<<DS18B20_DQ);
 2e4:	38 98       	cbi	0x07, 0	; 7
 2e6:	84 e1       	ldi	r24, 0x14	; 20
 2e8:	8a 95       	dec	r24
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <ds18b20_writebit+0xc>

    _delay_us(60);
    DS18B20_DDR &= ~(1<<DS18B20_DQ);
 2ec:	38 98       	cbi	0x07, 0	; 7
 2ee:	08 95       	ret

000002f0 <ds18b20_readbit>:
}

uint8_t ds18b20_readbit(void){
    uint8_t bit=0;
    DS18B20_PORT &=~ (1<<DS18B20_DQ);
 2f0:	40 98       	cbi	0x08, 0	; 8
    DS18B20_DDR |= (1<<DS18B20_DQ);
 2f2:	38 9a       	sbi	0x07, 0	; 7
 2f4:	00 00       	nop
    _delay_us(1);

    DS18B20_DDR &= ~(1<<DS18B20_DQ);
 2f6:	38 98       	cbi	0x07, 0	; 7
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <ds18b20_readbit+0xa>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <ds18b20_readbit+0x10>
    _delay_us(14);

    if(DS18B20_PIN & (1<<DS18B20_DQ))
 300:	86 b1       	in	r24, 0x06	; 6
 302:	81 70       	andi	r24, 0x01	; 1
 304:	9f e0       	ldi	r25, 0x0F	; 15
 306:	9a 95       	dec	r25
 308:	f1 f7       	brne	.-4      	; 0x306 <ds18b20_readbit+0x16>
        bit=1;

    _delay_us(45);
    return bit;
}
 30a:	08 95       	ret

0000030c <ds18b20_writebyte>:

void ds18b20_writebyte(uint8_t byte){
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	d8 2f       	mov	r29, r24
    uint8_t i = 8;
    while(i--){
 312:	c9 e0       	ldi	r28, 0x09	; 9
 314:	05 c0       	rjmp	.+10     	; 0x320 <ds18b20_writebyte+0x14>
        ds18b20_writebit(byte&1);
 316:	8d 2f       	mov	r24, r29
 318:	81 70       	andi	r24, 0x01	; 1
 31a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ds18b20_writebit>
        byte >>= 1;
 31e:	d6 95       	lsr	r29
 320:	c1 50       	subi	r28, 0x01	; 1
    return bit;
}

void ds18b20_writebyte(uint8_t byte){
    uint8_t i = 8;
    while(i--){
 322:	c9 f7       	brne	.-14     	; 0x316 <ds18b20_writebyte+0xa>
        ds18b20_writebit(byte&1);
        byte >>= 1;
    }
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <ds18b20_readbyte>:

uint8_t ds18b20_readbyte(void){
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
    uint8_t i = 8;
    uint8_t n = 0;
    while(i--){
 32e:	d9 e0       	ldi	r29, 0x09	; 9
    }
}

uint8_t ds18b20_readbyte(void){
    uint8_t i = 8;
    uint8_t n = 0;
 330:	c0 e0       	ldi	r28, 0x00	; 0
    while(i--){
 332:	08 c0       	rjmp	.+16     	; 0x344 <ds18b20_readbyte+0x1a>
        n >>= 1;
        n |= (ds18b20_readbit()<<7);
 334:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ds18b20_readbit>
 338:	20 e8       	ldi	r18, 0x80	; 128
 33a:	82 9f       	mul	r24, r18
 33c:	c0 01       	movw	r24, r0
 33e:	11 24       	eor	r1, r1

uint8_t ds18b20_readbyte(void){
    uint8_t i = 8;
    uint8_t n = 0;
    while(i--){
        n >>= 1;
 340:	c6 95       	lsr	r28
        n |= (ds18b20_readbit()<<7);
 342:	c8 2b       	or	r28, r24
 344:	d1 50       	subi	r29, 0x01	; 1
}

uint8_t ds18b20_readbyte(void){
    uint8_t i = 8;
    uint8_t n = 0;
    while(i--){
 346:	b1 f7       	brne	.-20     	; 0x334 <ds18b20_readbyte+0xa>
        n >>= 1;
        n |= (ds18b20_readbit()<<7);
    }
    return n;
}
 348:	8c 2f       	mov	r24, r28
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <ds18b20_gettemp>:

double ds18b20_gettemp(void){
 350:	cf 93       	push	r28
    uint8_t temperature_l;
    uint8_t temperature_h;
    double retd = 0;

    #if DS18B20_StopInterruptOnRead == 1
    cli();
 352:	f8 94       	cli
    #endif
    ds18b20_reset();
 354:	0e 94 5f 01 	call	0x2be	; 0x2be <ds18b20_reset>
    ds18b20_writebyte(DS18B20_SkipROM);
 358:	8c ec       	ldi	r24, 0xCC	; 204
 35a:	0e 94 86 01 	call	0x30c	; 0x30c <ds18b20_writebyte>
    ds18b20_writebyte(DS18B20_ConvertTemp);
 35e:	84 e4       	ldi	r24, 0x44	; 68
 360:	0e 94 86 01 	call	0x30c	; 0x30c <ds18b20_writebyte>

    while(!ds18b20_readbit());
 364:	0e 94 78 01 	call	0x2f0	; 0x2f0 <ds18b20_readbit>
 368:	88 23       	and	r24, r24
 36a:	e1 f3       	breq	.-8      	; 0x364 <ds18b20_gettemp+0x14>

    ds18b20_reset();
 36c:	0e 94 5f 01 	call	0x2be	; 0x2be <ds18b20_reset>
    ds18b20_writebyte(DS18B20_SkipROM);
 370:	8c ec       	ldi	r24, 0xCC	; 204
 372:	0e 94 86 01 	call	0x30c	; 0x30c <ds18b20_writebyte>
    ds18b20_writebyte(DS18B20_RScratchPad);
 376:	8e eb       	ldi	r24, 0xBE	; 190
 378:	0e 94 86 01 	call	0x30c	; 0x30c <ds18b20_writebyte>

    temperature_l = ds18b20_readbyte();
 37c:	0e 94 95 01 	call	0x32a	; 0x32a <ds18b20_readbyte>
 380:	c8 2f       	mov	r28, r24
    temperature_h = ds18b20_readbyte();
 382:	0e 94 95 01 	call	0x32a	; 0x32a <ds18b20_readbyte>

    #if DS18B20_StopInterruptOnRead==1
    sei();
 386:	78 94       	sei
    #endif

    retd = ((temperature_h << 8) + temperature_l) * 0.0625;
 388:	78 2f       	mov	r23, r24
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	6c 0f       	add	r22, r28
 38e:	71 1d       	adc	r23, r1
 390:	88 27       	eor	r24, r24
 392:	77 fd       	sbrc	r23, 7
 394:	80 95       	com	r24
 396:	98 2f       	mov	r25, r24
 398:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatsisf>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e8       	ldi	r20, 0x80	; 128
 3a2:	5d e3       	ldi	r21, 0x3D	; 61
 3a4:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
    return retd;
}
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <main>:
#define BUFFERSIZE 12

#define F_CPU 1000000UL

int main(void){
    BOILER_DDR |= (1<<BOILER_BIT);
 3ac:	57 9a       	sbi	0x0a, 7	; 10
    lcd_D7_ddr |= (1<<lcd_D7_bit);
 3ae:	20 9a       	sbi	0x04, 0	; 4
    lcd_D6_ddr |= (1<<lcd_D6_bit);
 3b0:	22 9a       	sbi	0x04, 2	; 4
    lcd_D5_ddr |= (1<<lcd_D5_bit);
 3b2:	21 9a       	sbi	0x04, 1	; 4
    lcd_D4_ddr |= (1<<lcd_D4_bit);
 3b4:	54 9a       	sbi	0x0a, 4	; 10

    lcd_E_ddr |= (1<<lcd_E_bit);
 3b6:	3b 9a       	sbi	0x07, 3	; 7
    lcd_RS_ddr |= (1<<lcd_RS_bit);
 3b8:	3d 9a       	sbi	0x07, 5	; 7
    float t_base = 10;
    double d = 0;
    uint8_t t_target = 250;
    uint8_t t_target_new;
    
    ADC_Init();
 3ba:	0e 94 0a 01 	call	0x214	; 0x214 <ADC_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3be:	2f e3       	ldi	r18, 0x3F	; 63
 3c0:	8d e0       	ldi	r24, 0x0D	; 13
 3c2:	93 e0       	ldi	r25, 0x03	; 3
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x18>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x22>
 3ce:	00 00       	nop

    _delay_ms(1000);
    lcd_init_4d();
 3d0:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init_4d>

    lcd_write_instructions_4d(lcd_SetCursor | lcd_LineOne);
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <lcd_write_instructions_4d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	2a e1       	ldi	r18, 0x1A	; 26
 3dc:	2a 95       	dec	r18
 3de:	f1 f7       	brne	.-4      	; 0x3dc <main+0x30>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x36>
    _delay_us(80);
    d = ds18b20_gettemp();
 3e2:	0e 94 a8 01 	call	0x350	; 0x350 <ds18b20_gettemp>
 3e6:	d6 2e       	mov	r13, r22
 3e8:	c7 2e       	mov	r12, r23
 3ea:	b8 2e       	mov	r11, r24
 3ec:	a9 2e       	mov	r10, r25
    sei();
 3ee:	78 94       	sei
    lcd_E_ddr |= (1<<lcd_E_bit);
    lcd_RS_ddr |= (1<<lcd_RS_bit);

    float t_base = 10;
    double d = 0;
    uint8_t t_target = 250;
 3f0:	8a ef       	ldi	r24, 0xFA	; 250
 3f2:	98 2e       	mov	r9, r24
    for (;;){

        t_target_new = t_base + (100.-t_base) * read_ADC();
        if (abs(t_target_new-t_target)>5){
            t_target = t_target_new;
            sprintf(program_version, "Ttarget: %+1.1d", (signed int)d);
 3f4:	09 e0       	ldi	r16, 0x09	; 9
 3f6:	11 e0       	ldi	r17, 0x01	; 1
 3f8:	c0 e0       	ldi	r28, 0x00	; 0
 3fa:	d1 e0       	ldi	r29, 0x01	; 1
            lcd_write_hold_clear(program_version, 10000);
        }
        d = ds18b20_gettemp();
        d *= 10;
        sprintf(program_version, "%+1.1d", (signed int)d);
 3fc:	92 e1       	ldi	r25, 0x12	; 18
 3fe:	e9 2e       	mov	r14, r25
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	f9 2e       	mov	r15, r25
    _delay_us(80);
    d = ds18b20_gettemp();
    sei();
    for (;;){

        t_target_new = t_base + (100.-t_base) * read_ADC();
 404:	0e 94 1e 01 	call	0x23c	; 0x23c <read_ADC>
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	44 eb       	ldi	r20, 0xB4	; 180
 40e:	52 e4       	ldi	r21, 0x42	; 66
 410:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e2       	ldi	r20, 0x20	; 32
 41a:	51 e4       	ldi	r21, 0x41	; 65
 41c:	0e 94 8a 02 	call	0x514	; 0x514 <__addsf3>
 420:	0e 94 5f 03 	call	0x6be	; 0x6be <__fixunssfsi>
 424:	86 2e       	mov	r8, r22
        if (abs(t_target_new-t_target)>5){
 426:	86 2f       	mov	r24, r22
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	89 19       	sub	r24, r9
 42c:	91 09       	sbc	r25, r1
 42e:	97 ff       	sbrs	r25, 7
 430:	03 c0       	rjmp	.+6      	; 0x438 <main+0x8c>
 432:	91 95       	neg	r25
 434:	81 95       	neg	r24
 436:	91 09       	sbc	r25, r1
 438:	06 97       	sbiw	r24, 0x06	; 6
 43a:	fc f0       	brlt	.+62     	; 0x47a <main+0xce>
            t_target = t_target_new;
            sprintf(program_version, "Ttarget: %+1.1d", (signed int)d);
 43c:	a6 01       	movw	r20, r12
 43e:	95 01       	movw	r18, r10
 440:	65 2f       	mov	r22, r21
 442:	7c 2d       	mov	r23, r12
 444:	83 2f       	mov	r24, r19
 446:	9a 2d       	mov	r25, r10
 448:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fixsfsi>
 44c:	7f 93       	push	r23
 44e:	6f 93       	push	r22
 450:	1f 93       	push	r17
 452:	0f 93       	push	r16
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	0e 94 a0 04 	call	0x940	; 0x940 <sprintf>
            lcd_write_hold_clear(program_version, 10000);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	50 e4       	ldi	r21, 0x40	; 64
 460:	6c e1       	ldi	r22, 0x1C	; 28
 462:	76 e4       	ldi	r23, 0x46	; 70
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_hold_clear>
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
    sei();
    for (;;){

        t_target_new = t_base + (100.-t_base) * read_ADC();
        if (abs(t_target_new-t_target)>5){
            t_target = t_target_new;
 478:	98 2c       	mov	r9, r8
            sprintf(program_version, "Ttarget: %+1.1d", (signed int)d);
            lcd_write_hold_clear(program_version, 10000);
        }
        d = ds18b20_gettemp();
 47a:	0e 94 a8 01 	call	0x350	; 0x350 <ds18b20_gettemp>
        d *= 10;
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	40 e2       	ldi	r20, 0x20	; 32
 484:	51 e4       	ldi	r21, 0x41	; 65
 486:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 48a:	d6 2e       	mov	r13, r22
 48c:	c7 2e       	mov	r12, r23
 48e:	b8 2e       	mov	r11, r24
 490:	a9 2e       	mov	r10, r25
        sprintf(program_version, "%+1.1d", (signed int)d);
 492:	a6 01       	movw	r20, r12
 494:	95 01       	movw	r18, r10
 496:	65 2f       	mov	r22, r21
 498:	74 2f       	mov	r23, r20
 49a:	83 2f       	mov	r24, r19
 49c:	92 2f       	mov	r25, r18
 49e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__fixsfsi>
 4a2:	7f 93       	push	r23
 4a4:	6f 93       	push	r22
 4a6:	ff 92       	push	r15
 4a8:	ef 92       	push	r14
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	0e 94 a0 04 	call	0x940	; 0x940 <sprintf>

        if (d<t_target){
 4b2:	69 2d       	mov	r22, r9
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 8d 03 	call	0x71a	; 0x71a <__floatsisf>
 4be:	9b 01       	movw	r18, r22
 4c0:	ac 01       	movw	r20, r24
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	d6 01       	movw	r26, r12
 4d0:	f5 01       	movw	r30, r10
 4d2:	6b 2f       	mov	r22, r27
 4d4:	7a 2f       	mov	r23, r26
 4d6:	8f 2f       	mov	r24, r31
 4d8:	9e 2f       	mov	r25, r30
 4da:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__cmpsf2>
 4de:	87 ff       	sbrs	r24, 7
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <main+0x13a>
    return 0;
}

void heat(unsigned int doheat){
    if (doheat){
        BOILER_PORT |= (1<<BOILER_BIT);
 4e2:	5f 9a       	sbi	0x0b, 7	; 11
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <main+0x142>

        if (d<t_target){
            heat(1);
        }
        else{
            heat(0);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 59 01 	call	0x2b2	; 0x2b2 <heat>
        }
        lcd_write_hold_clear(program_version, 10000);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	50 e4       	ldi	r21, 0x40	; 64
 4f2:	6c e1       	ldi	r22, 0x1C	; 28
 4f4:	76 e4       	ldi	r23, 0x46	; 70
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_write_hold_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	9f eb       	ldi	r25, 0xBF	; 191
 500:	27 e2       	ldi	r18, 0x27	; 39
 502:	89 e0       	ldi	r24, 0x09	; 9
 504:	91 50       	subi	r25, 0x01	; 1
 506:	20 40       	sbci	r18, 0x00	; 0
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x158>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x162>
 50e:	00 00       	nop
 510:	79 cf       	rjmp	.-270    	; 0x404 <main+0x58>

00000512 <__subsf3>:
 512:	50 58       	subi	r21, 0x80	; 128

00000514 <__addsf3>:
 514:	bb 27       	eor	r27, r27
 516:	aa 27       	eor	r26, r26
 518:	0e d0       	rcall	.+28     	; 0x536 <__addsf3x>
 51a:	75 c1       	rjmp	.+746    	; 0x806 <__fp_round>
 51c:	66 d1       	rcall	.+716    	; 0x7ea <__fp_pscA>
 51e:	30 f0       	brcs	.+12     	; 0x52c <__addsf3+0x18>
 520:	6b d1       	rcall	.+726    	; 0x7f8 <__fp_pscB>
 522:	20 f0       	brcs	.+8      	; 0x52c <__addsf3+0x18>
 524:	31 f4       	brne	.+12     	; 0x532 <__addsf3+0x1e>
 526:	9f 3f       	cpi	r25, 0xFF	; 255
 528:	11 f4       	brne	.+4      	; 0x52e <__addsf3+0x1a>
 52a:	1e f4       	brtc	.+6      	; 0x532 <__addsf3+0x1e>
 52c:	5b c1       	rjmp	.+694    	; 0x7e4 <__fp_nan>
 52e:	0e f4       	brtc	.+2      	; 0x532 <__addsf3+0x1e>
 530:	e0 95       	com	r30
 532:	e7 fb       	bst	r30, 7
 534:	51 c1       	rjmp	.+674    	; 0x7d8 <__fp_inf>

00000536 <__addsf3x>:
 536:	e9 2f       	mov	r30, r25
 538:	77 d1       	rcall	.+750    	; 0x828 <__fp_split3>
 53a:	80 f3       	brcs	.-32     	; 0x51c <__addsf3+0x8>
 53c:	ba 17       	cp	r27, r26
 53e:	62 07       	cpc	r22, r18
 540:	73 07       	cpc	r23, r19
 542:	84 07       	cpc	r24, r20
 544:	95 07       	cpc	r25, r21
 546:	18 f0       	brcs	.+6      	; 0x54e <__addsf3x+0x18>
 548:	71 f4       	brne	.+28     	; 0x566 <__addsf3x+0x30>
 54a:	9e f5       	brtc	.+102    	; 0x5b2 <__addsf3x+0x7c>
 54c:	8f c1       	rjmp	.+798    	; 0x86c <__fp_zero>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3x+0x1c>
 550:	e0 95       	com	r30
 552:	0b 2e       	mov	r0, r27
 554:	ba 2f       	mov	r27, r26
 556:	a0 2d       	mov	r26, r0
 558:	0b 01       	movw	r0, r22
 55a:	b9 01       	movw	r22, r18
 55c:	90 01       	movw	r18, r0
 55e:	0c 01       	movw	r0, r24
 560:	ca 01       	movw	r24, r20
 562:	a0 01       	movw	r20, r0
 564:	11 24       	eor	r1, r1
 566:	ff 27       	eor	r31, r31
 568:	59 1b       	sub	r21, r25
 56a:	99 f0       	breq	.+38     	; 0x592 <__addsf3x+0x5c>
 56c:	59 3f       	cpi	r21, 0xF9	; 249
 56e:	50 f4       	brcc	.+20     	; 0x584 <__addsf3x+0x4e>
 570:	50 3e       	cpi	r21, 0xE0	; 224
 572:	68 f1       	brcs	.+90     	; 0x5ce <__addsf3x+0x98>
 574:	1a 16       	cp	r1, r26
 576:	f0 40       	sbci	r31, 0x00	; 0
 578:	a2 2f       	mov	r26, r18
 57a:	23 2f       	mov	r18, r19
 57c:	34 2f       	mov	r19, r20
 57e:	44 27       	eor	r20, r20
 580:	58 5f       	subi	r21, 0xF8	; 248
 582:	f3 cf       	rjmp	.-26     	; 0x56a <__addsf3x+0x34>
 584:	46 95       	lsr	r20
 586:	37 95       	ror	r19
 588:	27 95       	ror	r18
 58a:	a7 95       	ror	r26
 58c:	f0 40       	sbci	r31, 0x00	; 0
 58e:	53 95       	inc	r21
 590:	c9 f7       	brne	.-14     	; 0x584 <__addsf3x+0x4e>
 592:	7e f4       	brtc	.+30     	; 0x5b2 <__addsf3x+0x7c>
 594:	1f 16       	cp	r1, r31
 596:	ba 0b       	sbc	r27, r26
 598:	62 0b       	sbc	r22, r18
 59a:	73 0b       	sbc	r23, r19
 59c:	84 0b       	sbc	r24, r20
 59e:	ba f0       	brmi	.+46     	; 0x5ce <__addsf3x+0x98>
 5a0:	91 50       	subi	r25, 0x01	; 1
 5a2:	a1 f0       	breq	.+40     	; 0x5cc <__addsf3x+0x96>
 5a4:	ff 0f       	add	r31, r31
 5a6:	bb 1f       	adc	r27, r27
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	c2 f7       	brpl	.-16     	; 0x5a0 <__addsf3x+0x6a>
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <__addsf3x+0x98>
 5b2:	ba 0f       	add	r27, r26
 5b4:	62 1f       	adc	r22, r18
 5b6:	73 1f       	adc	r23, r19
 5b8:	84 1f       	adc	r24, r20
 5ba:	48 f4       	brcc	.+18     	; 0x5ce <__addsf3x+0x98>
 5bc:	87 95       	ror	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f7 95       	ror	r31
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <__addsf3x+0x96>
 5ca:	b3 cf       	rjmp	.-154    	; 0x532 <__addsf3+0x1e>
 5cc:	93 95       	inc	r25
 5ce:	88 0f       	add	r24, r24
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__addsf3x+0x9e>
 5d2:	99 27       	eor	r25, r25
 5d4:	ee 0f       	add	r30, r30
 5d6:	97 95       	ror	r25
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret

000005dc <__cmpsf2>:
 5dc:	d9 d0       	rcall	.+434    	; 0x790 <__fp_cmp>
 5de:	08 f4       	brcc	.+2      	; 0x5e2 <__cmpsf2+0x6>
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	08 95       	ret

000005e4 <__divsf3>:
 5e4:	0c d0       	rcall	.+24     	; 0x5fe <__divsf3x>
 5e6:	0f c1       	rjmp	.+542    	; 0x806 <__fp_round>
 5e8:	07 d1       	rcall	.+526    	; 0x7f8 <__fp_pscB>
 5ea:	40 f0       	brcs	.+16     	; 0x5fc <__divsf3+0x18>
 5ec:	fe d0       	rcall	.+508    	; 0x7ea <__fp_pscA>
 5ee:	30 f0       	brcs	.+12     	; 0x5fc <__divsf3+0x18>
 5f0:	21 f4       	brne	.+8      	; 0x5fa <__divsf3+0x16>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	19 f0       	breq	.+6      	; 0x5fc <__divsf3+0x18>
 5f6:	f0 c0       	rjmp	.+480    	; 0x7d8 <__fp_inf>
 5f8:	51 11       	cpse	r21, r1
 5fa:	39 c1       	rjmp	.+626    	; 0x86e <__fp_szero>
 5fc:	f3 c0       	rjmp	.+486    	; 0x7e4 <__fp_nan>

000005fe <__divsf3x>:
 5fe:	14 d1       	rcall	.+552    	; 0x828 <__fp_split3>
 600:	98 f3       	brcs	.-26     	; 0x5e8 <__divsf3+0x4>

00000602 <__divsf3_pse>:
 602:	99 23       	and	r25, r25
 604:	c9 f3       	breq	.-14     	; 0x5f8 <__divsf3+0x14>
 606:	55 23       	and	r21, r21
 608:	b1 f3       	breq	.-20     	; 0x5f6 <__divsf3+0x12>
 60a:	95 1b       	sub	r25, r21
 60c:	55 0b       	sbc	r21, r21
 60e:	bb 27       	eor	r27, r27
 610:	aa 27       	eor	r26, r26
 612:	62 17       	cp	r22, r18
 614:	73 07       	cpc	r23, r19
 616:	84 07       	cpc	r24, r20
 618:	38 f0       	brcs	.+14     	; 0x628 <__divsf3_pse+0x26>
 61a:	9f 5f       	subi	r25, 0xFF	; 255
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	44 1f       	adc	r20, r20
 624:	aa 1f       	adc	r26, r26
 626:	a9 f3       	breq	.-22     	; 0x612 <__divsf3_pse+0x10>
 628:	33 d0       	rcall	.+102    	; 0x690 <__divsf3_pse+0x8e>
 62a:	0e 2e       	mov	r0, r30
 62c:	3a f0       	brmi	.+14     	; 0x63c <__divsf3_pse+0x3a>
 62e:	e0 e8       	ldi	r30, 0x80	; 128
 630:	30 d0       	rcall	.+96     	; 0x692 <__divsf3_pse+0x90>
 632:	91 50       	subi	r25, 0x01	; 1
 634:	50 40       	sbci	r21, 0x00	; 0
 636:	e6 95       	lsr	r30
 638:	00 1c       	adc	r0, r0
 63a:	ca f7       	brpl	.-14     	; 0x62e <__divsf3_pse+0x2c>
 63c:	29 d0       	rcall	.+82     	; 0x690 <__divsf3_pse+0x8e>
 63e:	fe 2f       	mov	r31, r30
 640:	27 d0       	rcall	.+78     	; 0x690 <__divsf3_pse+0x8e>
 642:	66 0f       	add	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	bb 1f       	adc	r27, r27
 64a:	26 17       	cp	r18, r22
 64c:	37 07       	cpc	r19, r23
 64e:	48 07       	cpc	r20, r24
 650:	ab 07       	cpc	r26, r27
 652:	b0 e8       	ldi	r27, 0x80	; 128
 654:	09 f0       	breq	.+2      	; 0x658 <__divsf3_pse+0x56>
 656:	bb 0b       	sbc	r27, r27
 658:	80 2d       	mov	r24, r0
 65a:	bf 01       	movw	r22, r30
 65c:	ff 27       	eor	r31, r31
 65e:	93 58       	subi	r25, 0x83	; 131
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	2a f0       	brmi	.+10     	; 0x66e <__divsf3_pse+0x6c>
 664:	9e 3f       	cpi	r25, 0xFE	; 254
 666:	51 05       	cpc	r21, r1
 668:	68 f0       	brcs	.+26     	; 0x684 <__divsf3_pse+0x82>
 66a:	b6 c0       	rjmp	.+364    	; 0x7d8 <__fp_inf>
 66c:	00 c1       	rjmp	.+512    	; 0x86e <__fp_szero>
 66e:	5f 3f       	cpi	r21, 0xFF	; 255
 670:	ec f3       	brlt	.-6      	; 0x66c <__divsf3_pse+0x6a>
 672:	98 3e       	cpi	r25, 0xE8	; 232
 674:	dc f3       	brlt	.-10     	; 0x66c <__divsf3_pse+0x6a>
 676:	86 95       	lsr	r24
 678:	77 95       	ror	r23
 67a:	67 95       	ror	r22
 67c:	b7 95       	ror	r27
 67e:	f7 95       	ror	r31
 680:	9f 5f       	subi	r25, 0xFF	; 255
 682:	c9 f7       	brne	.-14     	; 0x676 <__divsf3_pse+0x74>
 684:	88 0f       	add	r24, r24
 686:	91 1d       	adc	r25, r1
 688:	96 95       	lsr	r25
 68a:	87 95       	ror	r24
 68c:	97 f9       	bld	r25, 7
 68e:	08 95       	ret
 690:	e1 e0       	ldi	r30, 0x01	; 1
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	bb 1f       	adc	r27, r27
 69a:	62 17       	cp	r22, r18
 69c:	73 07       	cpc	r23, r19
 69e:	84 07       	cpc	r24, r20
 6a0:	ba 07       	cpc	r27, r26
 6a2:	20 f0       	brcs	.+8      	; 0x6ac <__divsf3_pse+0xaa>
 6a4:	62 1b       	sub	r22, r18
 6a6:	73 0b       	sbc	r23, r19
 6a8:	84 0b       	sbc	r24, r20
 6aa:	ba 0b       	sbc	r27, r26
 6ac:	ee 1f       	adc	r30, r30
 6ae:	88 f7       	brcc	.-30     	; 0x692 <__divsf3_pse+0x90>
 6b0:	e0 95       	com	r30
 6b2:	08 95       	ret

000006b4 <__fixsfsi>:
 6b4:	04 d0       	rcall	.+8      	; 0x6be <__fixunssfsi>
 6b6:	68 94       	set
 6b8:	b1 11       	cpse	r27, r1
 6ba:	d9 c0       	rjmp	.+434    	; 0x86e <__fp_szero>
 6bc:	08 95       	ret

000006be <__fixunssfsi>:
 6be:	bc d0       	rcall	.+376    	; 0x838 <__fp_splitA>
 6c0:	88 f0       	brcs	.+34     	; 0x6e4 <__fixunssfsi+0x26>
 6c2:	9f 57       	subi	r25, 0x7F	; 127
 6c4:	90 f0       	brcs	.+36     	; 0x6ea <__fixunssfsi+0x2c>
 6c6:	b9 2f       	mov	r27, r25
 6c8:	99 27       	eor	r25, r25
 6ca:	b7 51       	subi	r27, 0x17	; 23
 6cc:	a0 f0       	brcs	.+40     	; 0x6f6 <__fixunssfsi+0x38>
 6ce:	d1 f0       	breq	.+52     	; 0x704 <__fixunssfsi+0x46>
 6d0:	66 0f       	add	r22, r22
 6d2:	77 1f       	adc	r23, r23
 6d4:	88 1f       	adc	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	1a f0       	brmi	.+6      	; 0x6e0 <__fixunssfsi+0x22>
 6da:	ba 95       	dec	r27
 6dc:	c9 f7       	brne	.-14     	; 0x6d0 <__fixunssfsi+0x12>
 6de:	12 c0       	rjmp	.+36     	; 0x704 <__fixunssfsi+0x46>
 6e0:	b1 30       	cpi	r27, 0x01	; 1
 6e2:	81 f0       	breq	.+32     	; 0x704 <__fixunssfsi+0x46>
 6e4:	c3 d0       	rcall	.+390    	; 0x86c <__fp_zero>
 6e6:	b1 e0       	ldi	r27, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	c0 c0       	rjmp	.+384    	; 0x86c <__fp_zero>
 6ec:	67 2f       	mov	r22, r23
 6ee:	78 2f       	mov	r23, r24
 6f0:	88 27       	eor	r24, r24
 6f2:	b8 5f       	subi	r27, 0xF8	; 248
 6f4:	39 f0       	breq	.+14     	; 0x704 <__fixunssfsi+0x46>
 6f6:	b9 3f       	cpi	r27, 0xF9	; 249
 6f8:	cc f3       	brlt	.-14     	; 0x6ec <__fixunssfsi+0x2e>
 6fa:	86 95       	lsr	r24
 6fc:	77 95       	ror	r23
 6fe:	67 95       	ror	r22
 700:	b3 95       	inc	r27
 702:	d9 f7       	brne	.-10     	; 0x6fa <__fixunssfsi+0x3c>
 704:	3e f4       	brtc	.+14     	; 0x714 <__fixunssfsi+0x56>
 706:	90 95       	com	r25
 708:	80 95       	com	r24
 70a:	70 95       	com	r23
 70c:	61 95       	neg	r22
 70e:	7f 4f       	sbci	r23, 0xFF	; 255
 710:	8f 4f       	sbci	r24, 0xFF	; 255
 712:	9f 4f       	sbci	r25, 0xFF	; 255
 714:	08 95       	ret

00000716 <__floatunsisf>:
 716:	e8 94       	clt
 718:	09 c0       	rjmp	.+18     	; 0x72c <__floatsisf+0x12>

0000071a <__floatsisf>:
 71a:	97 fb       	bst	r25, 7
 71c:	3e f4       	brtc	.+14     	; 0x72c <__floatsisf+0x12>
 71e:	90 95       	com	r25
 720:	80 95       	com	r24
 722:	70 95       	com	r23
 724:	61 95       	neg	r22
 726:	7f 4f       	sbci	r23, 0xFF	; 255
 728:	8f 4f       	sbci	r24, 0xFF	; 255
 72a:	9f 4f       	sbci	r25, 0xFF	; 255
 72c:	99 23       	and	r25, r25
 72e:	a9 f0       	breq	.+42     	; 0x75a <__floatsisf+0x40>
 730:	f9 2f       	mov	r31, r25
 732:	96 e9       	ldi	r25, 0x96	; 150
 734:	bb 27       	eor	r27, r27
 736:	93 95       	inc	r25
 738:	f6 95       	lsr	r31
 73a:	87 95       	ror	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b7 95       	ror	r27
 742:	f1 11       	cpse	r31, r1
 744:	f8 cf       	rjmp	.-16     	; 0x736 <__floatsisf+0x1c>
 746:	fa f4       	brpl	.+62     	; 0x786 <__floatsisf+0x6c>
 748:	bb 0f       	add	r27, r27
 74a:	11 f4       	brne	.+4      	; 0x750 <__floatsisf+0x36>
 74c:	60 ff       	sbrs	r22, 0
 74e:	1b c0       	rjmp	.+54     	; 0x786 <__floatsisf+0x6c>
 750:	6f 5f       	subi	r22, 0xFF	; 255
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	16 c0       	rjmp	.+44     	; 0x786 <__floatsisf+0x6c>
 75a:	88 23       	and	r24, r24
 75c:	11 f0       	breq	.+4      	; 0x762 <__floatsisf+0x48>
 75e:	96 e9       	ldi	r25, 0x96	; 150
 760:	11 c0       	rjmp	.+34     	; 0x784 <__floatsisf+0x6a>
 762:	77 23       	and	r23, r23
 764:	21 f0       	breq	.+8      	; 0x76e <__floatsisf+0x54>
 766:	9e e8       	ldi	r25, 0x8E	; 142
 768:	87 2f       	mov	r24, r23
 76a:	76 2f       	mov	r23, r22
 76c:	05 c0       	rjmp	.+10     	; 0x778 <__floatsisf+0x5e>
 76e:	66 23       	and	r22, r22
 770:	71 f0       	breq	.+28     	; 0x78e <__floatsisf+0x74>
 772:	96 e8       	ldi	r25, 0x86	; 134
 774:	86 2f       	mov	r24, r22
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	2a f0       	brmi	.+10     	; 0x786 <__floatsisf+0x6c>
 77c:	9a 95       	dec	r25
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	da f7       	brpl	.-10     	; 0x77c <__floatsisf+0x62>
 786:	88 0f       	add	r24, r24
 788:	96 95       	lsr	r25
 78a:	87 95       	ror	r24
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__fp_cmp>:
 790:	99 0f       	add	r25, r25
 792:	00 08       	sbc	r0, r0
 794:	55 0f       	add	r21, r21
 796:	aa 0b       	sbc	r26, r26
 798:	e0 e8       	ldi	r30, 0x80	; 128
 79a:	fe ef       	ldi	r31, 0xFE	; 254
 79c:	16 16       	cp	r1, r22
 79e:	17 06       	cpc	r1, r23
 7a0:	e8 07       	cpc	r30, r24
 7a2:	f9 07       	cpc	r31, r25
 7a4:	c0 f0       	brcs	.+48     	; 0x7d6 <__fp_cmp+0x46>
 7a6:	12 16       	cp	r1, r18
 7a8:	13 06       	cpc	r1, r19
 7aa:	e4 07       	cpc	r30, r20
 7ac:	f5 07       	cpc	r31, r21
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fp_cmp+0x46>
 7b0:	62 1b       	sub	r22, r18
 7b2:	73 0b       	sbc	r23, r19
 7b4:	84 0b       	sbc	r24, r20
 7b6:	95 0b       	sbc	r25, r21
 7b8:	39 f4       	brne	.+14     	; 0x7c8 <__fp_cmp+0x38>
 7ba:	0a 26       	eor	r0, r26
 7bc:	61 f0       	breq	.+24     	; 0x7d6 <__fp_cmp+0x46>
 7be:	23 2b       	or	r18, r19
 7c0:	24 2b       	or	r18, r20
 7c2:	25 2b       	or	r18, r21
 7c4:	21 f4       	brne	.+8      	; 0x7ce <__fp_cmp+0x3e>
 7c6:	08 95       	ret
 7c8:	0a 26       	eor	r0, r26
 7ca:	09 f4       	brne	.+2      	; 0x7ce <__fp_cmp+0x3e>
 7cc:	a1 40       	sbci	r26, 0x01	; 1
 7ce:	a6 95       	lsr	r26
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	81 1d       	adc	r24, r1
 7d4:	81 1d       	adc	r24, r1
 7d6:	08 95       	ret

000007d8 <__fp_inf>:
 7d8:	97 f9       	bld	r25, 7
 7da:	9f 67       	ori	r25, 0x7F	; 127
 7dc:	80 e8       	ldi	r24, 0x80	; 128
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	08 95       	ret

000007e4 <__fp_nan>:
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	80 ec       	ldi	r24, 0xC0	; 192
 7e8:	08 95       	ret

000007ea <__fp_pscA>:
 7ea:	00 24       	eor	r0, r0
 7ec:	0a 94       	dec	r0
 7ee:	16 16       	cp	r1, r22
 7f0:	17 06       	cpc	r1, r23
 7f2:	18 06       	cpc	r1, r24
 7f4:	09 06       	cpc	r0, r25
 7f6:	08 95       	ret

000007f8 <__fp_pscB>:
 7f8:	00 24       	eor	r0, r0
 7fa:	0a 94       	dec	r0
 7fc:	12 16       	cp	r1, r18
 7fe:	13 06       	cpc	r1, r19
 800:	14 06       	cpc	r1, r20
 802:	05 06       	cpc	r0, r21
 804:	08 95       	ret

00000806 <__fp_round>:
 806:	09 2e       	mov	r0, r25
 808:	03 94       	inc	r0
 80a:	00 0c       	add	r0, r0
 80c:	11 f4       	brne	.+4      	; 0x812 <__fp_round+0xc>
 80e:	88 23       	and	r24, r24
 810:	52 f0       	brmi	.+20     	; 0x826 <__fp_round+0x20>
 812:	bb 0f       	add	r27, r27
 814:	40 f4       	brcc	.+16     	; 0x826 <__fp_round+0x20>
 816:	bf 2b       	or	r27, r31
 818:	11 f4       	brne	.+4      	; 0x81e <__fp_round+0x18>
 81a:	60 ff       	sbrs	r22, 0
 81c:	04 c0       	rjmp	.+8      	; 0x826 <__fp_round+0x20>
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__fp_split3>:
 828:	57 fd       	sbrc	r21, 7
 82a:	90 58       	subi	r25, 0x80	; 128
 82c:	44 0f       	add	r20, r20
 82e:	55 1f       	adc	r21, r21
 830:	59 f0       	breq	.+22     	; 0x848 <__fp_splitA+0x10>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	71 f0       	breq	.+28     	; 0x852 <__fp_splitA+0x1a>
 836:	47 95       	ror	r20

00000838 <__fp_splitA>:
 838:	88 0f       	add	r24, r24
 83a:	97 fb       	bst	r25, 7
 83c:	99 1f       	adc	r25, r25
 83e:	61 f0       	breq	.+24     	; 0x858 <__fp_splitA+0x20>
 840:	9f 3f       	cpi	r25, 0xFF	; 255
 842:	79 f0       	breq	.+30     	; 0x862 <__fp_splitA+0x2a>
 844:	87 95       	ror	r24
 846:	08 95       	ret
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	55 1f       	adc	r21, r21
 850:	f2 cf       	rjmp	.-28     	; 0x836 <__fp_split3+0xe>
 852:	46 95       	lsr	r20
 854:	f1 df       	rcall	.-30     	; 0x838 <__fp_splitA>
 856:	08 c0       	rjmp	.+16     	; 0x868 <__fp_splitA+0x30>
 858:	16 16       	cp	r1, r22
 85a:	17 06       	cpc	r1, r23
 85c:	18 06       	cpc	r1, r24
 85e:	99 1f       	adc	r25, r25
 860:	f1 cf       	rjmp	.-30     	; 0x844 <__fp_splitA+0xc>
 862:	86 95       	lsr	r24
 864:	71 05       	cpc	r23, r1
 866:	61 05       	cpc	r22, r1
 868:	08 94       	sec
 86a:	08 95       	ret

0000086c <__fp_zero>:
 86c:	e8 94       	clt

0000086e <__fp_szero>:
 86e:	bb 27       	eor	r27, r27
 870:	66 27       	eor	r22, r22
 872:	77 27       	eor	r23, r23
 874:	cb 01       	movw	r24, r22
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__mulsf3>:
 87a:	0b d0       	rcall	.+22     	; 0x892 <__mulsf3x>
 87c:	c4 cf       	rjmp	.-120    	; 0x806 <__fp_round>
 87e:	b5 df       	rcall	.-150    	; 0x7ea <__fp_pscA>
 880:	28 f0       	brcs	.+10     	; 0x88c <__mulsf3+0x12>
 882:	ba df       	rcall	.-140    	; 0x7f8 <__fp_pscB>
 884:	18 f0       	brcs	.+6      	; 0x88c <__mulsf3+0x12>
 886:	95 23       	and	r25, r21
 888:	09 f0       	breq	.+2      	; 0x88c <__mulsf3+0x12>
 88a:	a6 cf       	rjmp	.-180    	; 0x7d8 <__fp_inf>
 88c:	ab cf       	rjmp	.-170    	; 0x7e4 <__fp_nan>
 88e:	11 24       	eor	r1, r1
 890:	ee cf       	rjmp	.-36     	; 0x86e <__fp_szero>

00000892 <__mulsf3x>:
 892:	ca df       	rcall	.-108    	; 0x828 <__fp_split3>
 894:	a0 f3       	brcs	.-24     	; 0x87e <__mulsf3+0x4>

00000896 <__mulsf3_pse>:
 896:	95 9f       	mul	r25, r21
 898:	d1 f3       	breq	.-12     	; 0x88e <__mulsf3+0x14>
 89a:	95 0f       	add	r25, r21
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	55 1f       	adc	r21, r21
 8a0:	62 9f       	mul	r22, r18
 8a2:	f0 01       	movw	r30, r0
 8a4:	72 9f       	mul	r23, r18
 8a6:	bb 27       	eor	r27, r27
 8a8:	f0 0d       	add	r31, r0
 8aa:	b1 1d       	adc	r27, r1
 8ac:	63 9f       	mul	r22, r19
 8ae:	aa 27       	eor	r26, r26
 8b0:	f0 0d       	add	r31, r0
 8b2:	b1 1d       	adc	r27, r1
 8b4:	aa 1f       	adc	r26, r26
 8b6:	64 9f       	mul	r22, r20
 8b8:	66 27       	eor	r22, r22
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	66 1f       	adc	r22, r22
 8c0:	82 9f       	mul	r24, r18
 8c2:	22 27       	eor	r18, r18
 8c4:	b0 0d       	add	r27, r0
 8c6:	a1 1d       	adc	r26, r1
 8c8:	62 1f       	adc	r22, r18
 8ca:	73 9f       	mul	r23, r19
 8cc:	b0 0d       	add	r27, r0
 8ce:	a1 1d       	adc	r26, r1
 8d0:	62 1f       	adc	r22, r18
 8d2:	83 9f       	mul	r24, r19
 8d4:	a0 0d       	add	r26, r0
 8d6:	61 1d       	adc	r22, r1
 8d8:	22 1f       	adc	r18, r18
 8da:	74 9f       	mul	r23, r20
 8dc:	33 27       	eor	r19, r19
 8de:	a0 0d       	add	r26, r0
 8e0:	61 1d       	adc	r22, r1
 8e2:	23 1f       	adc	r18, r19
 8e4:	84 9f       	mul	r24, r20
 8e6:	60 0d       	add	r22, r0
 8e8:	21 1d       	adc	r18, r1
 8ea:	82 2f       	mov	r24, r18
 8ec:	76 2f       	mov	r23, r22
 8ee:	6a 2f       	mov	r22, r26
 8f0:	11 24       	eor	r1, r1
 8f2:	9f 57       	subi	r25, 0x7F	; 127
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	8a f0       	brmi	.+34     	; 0x91a <__stack+0x1b>
 8f8:	e1 f0       	breq	.+56     	; 0x932 <__stack+0x33>
 8fa:	88 23       	and	r24, r24
 8fc:	4a f0       	brmi	.+18     	; 0x910 <__stack+0x11>
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	bb 1f       	adc	r27, r27
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	a9 f7       	brne	.-22     	; 0x8fa <__mulsf3_pse+0x64>
 910:	9e 3f       	cpi	r25, 0xFE	; 254
 912:	51 05       	cpc	r21, r1
 914:	70 f0       	brcs	.+28     	; 0x932 <__stack+0x33>
 916:	60 cf       	rjmp	.-320    	; 0x7d8 <__fp_inf>
 918:	aa cf       	rjmp	.-172    	; 0x86e <__fp_szero>
 91a:	5f 3f       	cpi	r21, 0xFF	; 255
 91c:	ec f3       	brlt	.-6      	; 0x918 <__stack+0x19>
 91e:	98 3e       	cpi	r25, 0xE8	; 232
 920:	dc f3       	brlt	.-10     	; 0x918 <__stack+0x19>
 922:	86 95       	lsr	r24
 924:	77 95       	ror	r23
 926:	67 95       	ror	r22
 928:	b7 95       	ror	r27
 92a:	f7 95       	ror	r31
 92c:	e7 95       	ror	r30
 92e:	9f 5f       	subi	r25, 0xFF	; 255
 930:	c1 f7       	brne	.-16     	; 0x922 <__stack+0x23>
 932:	fe 2b       	or	r31, r30
 934:	88 0f       	add	r24, r24
 936:	91 1d       	adc	r25, r1
 938:	96 95       	lsr	r25
 93a:	87 95       	ror	r24
 93c:	97 f9       	bld	r25, 7
 93e:	08 95       	ret

00000940 <sprintf>:
 940:	a0 e1       	ldi	r26, 0x10	; 16
 942:	b0 e0       	ldi	r27, 0x00	; 0
 944:	e6 ea       	ldi	r30, 0xA6	; 166
 946:	f4 e0       	ldi	r31, 0x04	; 4
 948:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__prologue_saves__+0x1c>
 94c:	0f 89       	ldd	r16, Y+23	; 0x17
 94e:	18 8d       	ldd	r17, Y+24	; 0x18
 950:	86 e0       	ldi	r24, 0x06	; 6
 952:	8c 83       	std	Y+4, r24	; 0x04
 954:	1a 83       	std	Y+2, r17	; 0x02
 956:	09 83       	std	Y+1, r16	; 0x01
 958:	8f ef       	ldi	r24, 0xFF	; 255
 95a:	9f e7       	ldi	r25, 0x7F	; 127
 95c:	9e 83       	std	Y+6, r25	; 0x06
 95e:	8d 83       	std	Y+5, r24	; 0x05
 960:	ae 01       	movw	r20, r28
 962:	45 5e       	subi	r20, 0xE5	; 229
 964:	5f 4f       	sbci	r21, 0xFF	; 255
 966:	58 8b       	std	Y+16, r21	; 0x10
 968:	4f 87       	std	Y+15, r20	; 0x0f
 96a:	69 8d       	ldd	r22, Y+25	; 0x19
 96c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 c4 04 	call	0x988	; 0x988 <vfprintf>
 976:	ef 81       	ldd	r30, Y+7	; 0x07
 978:	f8 85       	ldd	r31, Y+8	; 0x08
 97a:	e0 0f       	add	r30, r16
 97c:	f1 1f       	adc	r31, r17
 97e:	10 82       	st	Z, r1
 980:	60 96       	adiw	r28, 0x10	; 16
 982:	e4 e0       	ldi	r30, 0x04	; 4
 984:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__epilogue_restores__+0x1c>

00000988 <vfprintf>:
 988:	ac e0       	ldi	r26, 0x0C	; 12
 98a:	b0 e0       	ldi	r27, 0x00	; 0
 98c:	ea ec       	ldi	r30, 0xCA	; 202
 98e:	f4 e0       	ldi	r31, 0x04	; 4
 990:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__prologue_saves__>
 994:	7c 01       	movw	r14, r24
 996:	6b 01       	movw	r12, r22
 998:	8a 01       	movw	r16, r20
 99a:	fc 01       	movw	r30, r24
 99c:	17 82       	std	Z+7, r1	; 0x07
 99e:	16 82       	std	Z+6, r1	; 0x06
 9a0:	83 81       	ldd	r24, Z+3	; 0x03
 9a2:	81 ff       	sbrs	r24, 1
 9a4:	c7 c1       	rjmp	.+910    	; 0xd34 <vfprintf+0x3ac>
 9a6:	88 24       	eor	r8, r8
 9a8:	83 94       	inc	r8
 9aa:	91 2c       	mov	r9, r1
 9ac:	8c 0e       	add	r8, r28
 9ae:	9d 1e       	adc	r9, r29
 9b0:	f7 01       	movw	r30, r14
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	f6 01       	movw	r30, r12
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	6f 01       	movw	r12, r30
 9c0:	88 23       	and	r24, r24
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <vfprintf+0x3e>
 9c4:	b3 c1       	rjmp	.+870    	; 0xd2c <vfprintf+0x3a4>
 9c6:	85 32       	cpi	r24, 0x25	; 37
 9c8:	39 f4       	brne	.+14     	; 0x9d8 <vfprintf+0x50>
 9ca:	93 fd       	sbrc	r25, 3
 9cc:	85 91       	lpm	r24, Z+
 9ce:	93 ff       	sbrs	r25, 3
 9d0:	81 91       	ld	r24, Z+
 9d2:	6f 01       	movw	r12, r30
 9d4:	85 32       	cpi	r24, 0x25	; 37
 9d6:	29 f4       	brne	.+10     	; 0x9e2 <vfprintf+0x5a>
 9d8:	b7 01       	movw	r22, r14
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 9e0:	e7 cf       	rjmp	.-50     	; 0x9b0 <vfprintf+0x28>
 9e2:	71 2c       	mov	r7, r1
 9e4:	31 2c       	mov	r3, r1
 9e6:	20 e0       	ldi	r18, 0x00	; 0
 9e8:	20 32       	cpi	r18, 0x20	; 32
 9ea:	a8 f4       	brcc	.+42     	; 0xa16 <vfprintf+0x8e>
 9ec:	8b 32       	cpi	r24, 0x2B	; 43
 9ee:	61 f0       	breq	.+24     	; 0xa08 <vfprintf+0x80>
 9f0:	28 f4       	brcc	.+10     	; 0x9fc <vfprintf+0x74>
 9f2:	80 32       	cpi	r24, 0x20	; 32
 9f4:	51 f0       	breq	.+20     	; 0xa0a <vfprintf+0x82>
 9f6:	83 32       	cpi	r24, 0x23	; 35
 9f8:	71 f4       	brne	.+28     	; 0xa16 <vfprintf+0x8e>
 9fa:	0b c0       	rjmp	.+22     	; 0xa12 <vfprintf+0x8a>
 9fc:	8d 32       	cpi	r24, 0x2D	; 45
 9fe:	39 f0       	breq	.+14     	; 0xa0e <vfprintf+0x86>
 a00:	80 33       	cpi	r24, 0x30	; 48
 a02:	49 f4       	brne	.+18     	; 0xa16 <vfprintf+0x8e>
 a04:	21 60       	ori	r18, 0x01	; 1
 a06:	28 c0       	rjmp	.+80     	; 0xa58 <vfprintf+0xd0>
 a08:	22 60       	ori	r18, 0x02	; 2
 a0a:	24 60       	ori	r18, 0x04	; 4
 a0c:	25 c0       	rjmp	.+74     	; 0xa58 <vfprintf+0xd0>
 a0e:	28 60       	ori	r18, 0x08	; 8
 a10:	23 c0       	rjmp	.+70     	; 0xa58 <vfprintf+0xd0>
 a12:	20 61       	ori	r18, 0x10	; 16
 a14:	21 c0       	rjmp	.+66     	; 0xa58 <vfprintf+0xd0>
 a16:	27 fd       	sbrc	r18, 7
 a18:	27 c0       	rjmp	.+78     	; 0xa68 <vfprintf+0xe0>
 a1a:	38 2f       	mov	r19, r24
 a1c:	30 53       	subi	r19, 0x30	; 48
 a1e:	3a 30       	cpi	r19, 0x0A	; 10
 a20:	78 f4       	brcc	.+30     	; 0xa40 <vfprintf+0xb8>
 a22:	26 ff       	sbrs	r18, 6
 a24:	06 c0       	rjmp	.+12     	; 0xa32 <vfprintf+0xaa>
 a26:	fa e0       	ldi	r31, 0x0A	; 10
 a28:	7f 9e       	mul	r7, r31
 a2a:	30 0d       	add	r19, r0
 a2c:	11 24       	eor	r1, r1
 a2e:	73 2e       	mov	r7, r19
 a30:	13 c0       	rjmp	.+38     	; 0xa58 <vfprintf+0xd0>
 a32:	8a e0       	ldi	r24, 0x0A	; 10
 a34:	38 9e       	mul	r3, r24
 a36:	30 0d       	add	r19, r0
 a38:	11 24       	eor	r1, r1
 a3a:	33 2e       	mov	r3, r19
 a3c:	20 62       	ori	r18, 0x20	; 32
 a3e:	0c c0       	rjmp	.+24     	; 0xa58 <vfprintf+0xd0>
 a40:	8e 32       	cpi	r24, 0x2E	; 46
 a42:	21 f4       	brne	.+8      	; 0xa4c <vfprintf+0xc4>
 a44:	26 fd       	sbrc	r18, 6
 a46:	72 c1       	rjmp	.+740    	; 0xd2c <vfprintf+0x3a4>
 a48:	20 64       	ori	r18, 0x40	; 64
 a4a:	06 c0       	rjmp	.+12     	; 0xa58 <vfprintf+0xd0>
 a4c:	8c 36       	cpi	r24, 0x6C	; 108
 a4e:	11 f4       	brne	.+4      	; 0xa54 <vfprintf+0xcc>
 a50:	20 68       	ori	r18, 0x80	; 128
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <vfprintf+0xd0>
 a54:	88 36       	cpi	r24, 0x68	; 104
 a56:	41 f4       	brne	.+16     	; 0xa68 <vfprintf+0xe0>
 a58:	f6 01       	movw	r30, r12
 a5a:	93 fd       	sbrc	r25, 3
 a5c:	85 91       	lpm	r24, Z+
 a5e:	93 ff       	sbrs	r25, 3
 a60:	81 91       	ld	r24, Z+
 a62:	6f 01       	movw	r12, r30
 a64:	81 11       	cpse	r24, r1
 a66:	c0 cf       	rjmp	.-128    	; 0x9e8 <vfprintf+0x60>
 a68:	98 2f       	mov	r25, r24
 a6a:	95 54       	subi	r25, 0x45	; 69
 a6c:	93 30       	cpi	r25, 0x03	; 3
 a6e:	18 f0       	brcs	.+6      	; 0xa76 <vfprintf+0xee>
 a70:	90 52       	subi	r25, 0x20	; 32
 a72:	93 30       	cpi	r25, 0x03	; 3
 a74:	28 f4       	brcc	.+10     	; 0xa80 <vfprintf+0xf8>
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	ff e3       	ldi	r31, 0x3F	; 63
 a7c:	f9 83       	std	Y+1, r31	; 0x01
 a7e:	0d c0       	rjmp	.+26     	; 0xa9a <vfprintf+0x112>
 a80:	83 36       	cpi	r24, 0x63	; 99
 a82:	31 f0       	breq	.+12     	; 0xa90 <vfprintf+0x108>
 a84:	83 37       	cpi	r24, 0x73	; 115
 a86:	71 f0       	breq	.+28     	; 0xaa4 <vfprintf+0x11c>
 a88:	83 35       	cpi	r24, 0x53	; 83
 a8a:	09 f0       	breq	.+2      	; 0xa8e <vfprintf+0x106>
 a8c:	5e c0       	rjmp	.+188    	; 0xb4a <vfprintf+0x1c2>
 a8e:	23 c0       	rjmp	.+70     	; 0xad6 <vfprintf+0x14e>
 a90:	f8 01       	movw	r30, r16
 a92:	80 81       	ld	r24, Z
 a94:	89 83       	std	Y+1, r24	; 0x01
 a96:	0e 5f       	subi	r16, 0xFE	; 254
 a98:	1f 4f       	sbci	r17, 0xFF	; 255
 a9a:	66 24       	eor	r6, r6
 a9c:	63 94       	inc	r6
 a9e:	71 2c       	mov	r7, r1
 aa0:	54 01       	movw	r10, r8
 aa2:	15 c0       	rjmp	.+42     	; 0xace <vfprintf+0x146>
 aa4:	28 01       	movw	r4, r16
 aa6:	f2 e0       	ldi	r31, 0x02	; 2
 aa8:	4f 0e       	add	r4, r31
 aaa:	51 1c       	adc	r5, r1
 aac:	f8 01       	movw	r30, r16
 aae:	a0 80       	ld	r10, Z
 ab0:	b1 80       	ldd	r11, Z+1	; 0x01
 ab2:	26 ff       	sbrs	r18, 6
 ab4:	03 c0       	rjmp	.+6      	; 0xabc <vfprintf+0x134>
 ab6:	67 2d       	mov	r22, r7
 ab8:	70 e0       	ldi	r23, 0x00	; 0
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <vfprintf+0x138>
 abc:	6f ef       	ldi	r22, 0xFF	; 255
 abe:	7f ef       	ldi	r23, 0xFF	; 255
 ac0:	c5 01       	movw	r24, r10
 ac2:	2c 87       	std	Y+12, r18	; 0x0c
 ac4:	0e 94 ac 06 	call	0xd58	; 0xd58 <strnlen>
 ac8:	3c 01       	movw	r6, r24
 aca:	82 01       	movw	r16, r4
 acc:	2c 85       	ldd	r18, Y+12	; 0x0c
 ace:	6f e7       	ldi	r22, 0x7F	; 127
 ad0:	26 2e       	mov	r2, r22
 ad2:	22 22       	and	r2, r18
 ad4:	18 c0       	rjmp	.+48     	; 0xb06 <vfprintf+0x17e>
 ad6:	28 01       	movw	r4, r16
 ad8:	f2 e0       	ldi	r31, 0x02	; 2
 ada:	4f 0e       	add	r4, r31
 adc:	51 1c       	adc	r5, r1
 ade:	f8 01       	movw	r30, r16
 ae0:	a0 80       	ld	r10, Z
 ae2:	b1 80       	ldd	r11, Z+1	; 0x01
 ae4:	26 ff       	sbrs	r18, 6
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <vfprintf+0x166>
 ae8:	67 2d       	mov	r22, r7
 aea:	70 e0       	ldi	r23, 0x00	; 0
 aec:	02 c0       	rjmp	.+4      	; 0xaf2 <vfprintf+0x16a>
 aee:	6f ef       	ldi	r22, 0xFF	; 255
 af0:	7f ef       	ldi	r23, 0xFF	; 255
 af2:	c5 01       	movw	r24, r10
 af4:	2c 87       	std	Y+12, r18	; 0x0c
 af6:	0e 94 a1 06 	call	0xd42	; 0xd42 <strnlen_P>
 afa:	3c 01       	movw	r6, r24
 afc:	2c 85       	ldd	r18, Y+12	; 0x0c
 afe:	50 e8       	ldi	r21, 0x80	; 128
 b00:	25 2e       	mov	r2, r21
 b02:	22 2a       	or	r2, r18
 b04:	82 01       	movw	r16, r4
 b06:	23 fc       	sbrc	r2, 3
 b08:	1c c0       	rjmp	.+56     	; 0xb42 <vfprintf+0x1ba>
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <vfprintf+0x190>
 b0c:	b7 01       	movw	r22, r14
 b0e:	80 e2       	ldi	r24, 0x20	; 32
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 b16:	3a 94       	dec	r3
 b18:	83 2d       	mov	r24, r3
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	68 16       	cp	r6, r24
 b1e:	79 06       	cpc	r7, r25
 b20:	a8 f3       	brcs	.-22     	; 0xb0c <vfprintf+0x184>
 b22:	0f c0       	rjmp	.+30     	; 0xb42 <vfprintf+0x1ba>
 b24:	f5 01       	movw	r30, r10
 b26:	27 fc       	sbrc	r2, 7
 b28:	85 91       	lpm	r24, Z+
 b2a:	27 fe       	sbrs	r2, 7
 b2c:	81 91       	ld	r24, Z+
 b2e:	5f 01       	movw	r10, r30
 b30:	b7 01       	movw	r22, r14
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 b38:	31 10       	cpse	r3, r1
 b3a:	3a 94       	dec	r3
 b3c:	f1 e0       	ldi	r31, 0x01	; 1
 b3e:	6f 1a       	sub	r6, r31
 b40:	71 08       	sbc	r7, r1
 b42:	61 14       	cp	r6, r1
 b44:	71 04       	cpc	r7, r1
 b46:	71 f7       	brne	.-36     	; 0xb24 <vfprintf+0x19c>
 b48:	ee c0       	rjmp	.+476    	; 0xd26 <vfprintf+0x39e>
 b4a:	84 36       	cpi	r24, 0x64	; 100
 b4c:	11 f0       	breq	.+4      	; 0xb52 <vfprintf+0x1ca>
 b4e:	89 36       	cpi	r24, 0x69	; 105
 b50:	41 f5       	brne	.+80     	; 0xba2 <vfprintf+0x21a>
 b52:	f8 01       	movw	r30, r16
 b54:	27 ff       	sbrs	r18, 7
 b56:	07 c0       	rjmp	.+14     	; 0xb66 <vfprintf+0x1de>
 b58:	60 81       	ld	r22, Z
 b5a:	71 81       	ldd	r23, Z+1	; 0x01
 b5c:	82 81       	ldd	r24, Z+2	; 0x02
 b5e:	93 81       	ldd	r25, Z+3	; 0x03
 b60:	0c 5f       	subi	r16, 0xFC	; 252
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	08 c0       	rjmp	.+16     	; 0xb76 <vfprintf+0x1ee>
 b66:	60 81       	ld	r22, Z
 b68:	71 81       	ldd	r23, Z+1	; 0x01
 b6a:	88 27       	eor	r24, r24
 b6c:	77 fd       	sbrc	r23, 7
 b6e:	80 95       	com	r24
 b70:	98 2f       	mov	r25, r24
 b72:	0e 5f       	subi	r16, 0xFE	; 254
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	4f e6       	ldi	r20, 0x6F	; 111
 b78:	64 2e       	mov	r6, r20
 b7a:	62 22       	and	r6, r18
 b7c:	97 ff       	sbrs	r25, 7
 b7e:	09 c0       	rjmp	.+18     	; 0xb92 <vfprintf+0x20a>
 b80:	90 95       	com	r25
 b82:	80 95       	com	r24
 b84:	70 95       	com	r23
 b86:	61 95       	neg	r22
 b88:	7f 4f       	sbci	r23, 0xFF	; 255
 b8a:	8f 4f       	sbci	r24, 0xFF	; 255
 b8c:	9f 4f       	sbci	r25, 0xFF	; 255
 b8e:	f0 e8       	ldi	r31, 0x80	; 128
 b90:	6f 2a       	or	r6, r31
 b92:	2a e0       	ldi	r18, 0x0A	; 10
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	a4 01       	movw	r20, r8
 b98:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 b9c:	a8 2e       	mov	r10, r24
 b9e:	a8 18       	sub	r10, r8
 ba0:	44 c0       	rjmp	.+136    	; 0xc2a <vfprintf+0x2a2>
 ba2:	85 37       	cpi	r24, 0x75	; 117
 ba4:	31 f4       	brne	.+12     	; 0xbb2 <vfprintf+0x22a>
 ba6:	3f ee       	ldi	r19, 0xEF	; 239
 ba8:	b3 2e       	mov	r11, r19
 baa:	b2 22       	and	r11, r18
 bac:	2a e0       	ldi	r18, 0x0A	; 10
 bae:	30 e0       	ldi	r19, 0x00	; 0
 bb0:	24 c0       	rjmp	.+72     	; 0xbfa <vfprintf+0x272>
 bb2:	99 ef       	ldi	r25, 0xF9	; 249
 bb4:	b9 2e       	mov	r11, r25
 bb6:	b2 22       	and	r11, r18
 bb8:	8f 36       	cpi	r24, 0x6F	; 111
 bba:	b9 f0       	breq	.+46     	; 0xbea <vfprintf+0x262>
 bbc:	20 f4       	brcc	.+8      	; 0xbc6 <vfprintf+0x23e>
 bbe:	88 35       	cpi	r24, 0x58	; 88
 bc0:	09 f0       	breq	.+2      	; 0xbc4 <vfprintf+0x23c>
 bc2:	b4 c0       	rjmp	.+360    	; 0xd2c <vfprintf+0x3a4>
 bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <vfprintf+0x258>
 bc6:	80 37       	cpi	r24, 0x70	; 112
 bc8:	21 f0       	breq	.+8      	; 0xbd2 <vfprintf+0x24a>
 bca:	88 37       	cpi	r24, 0x78	; 120
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <vfprintf+0x248>
 bce:	ae c0       	rjmp	.+348    	; 0xd2c <vfprintf+0x3a4>
 bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <vfprintf+0x24e>
 bd2:	20 e1       	ldi	r18, 0x10	; 16
 bd4:	b2 2a       	or	r11, r18
 bd6:	b4 fe       	sbrs	r11, 4
 bd8:	0b c0       	rjmp	.+22     	; 0xbf0 <vfprintf+0x268>
 bda:	84 e0       	ldi	r24, 0x04	; 4
 bdc:	b8 2a       	or	r11, r24
 bde:	08 c0       	rjmp	.+16     	; 0xbf0 <vfprintf+0x268>
 be0:	24 ff       	sbrs	r18, 4
 be2:	09 c0       	rjmp	.+18     	; 0xbf6 <vfprintf+0x26e>
 be4:	e6 e0       	ldi	r30, 0x06	; 6
 be6:	be 2a       	or	r11, r30
 be8:	06 c0       	rjmp	.+12     	; 0xbf6 <vfprintf+0x26e>
 bea:	28 e0       	ldi	r18, 0x08	; 8
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	05 c0       	rjmp	.+10     	; 0xbfa <vfprintf+0x272>
 bf0:	20 e1       	ldi	r18, 0x10	; 16
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <vfprintf+0x272>
 bf6:	20 e1       	ldi	r18, 0x10	; 16
 bf8:	32 e0       	ldi	r19, 0x02	; 2
 bfa:	f8 01       	movw	r30, r16
 bfc:	b7 fe       	sbrs	r11, 7
 bfe:	07 c0       	rjmp	.+14     	; 0xc0e <vfprintf+0x286>
 c00:	60 81       	ld	r22, Z
 c02:	71 81       	ldd	r23, Z+1	; 0x01
 c04:	82 81       	ldd	r24, Z+2	; 0x02
 c06:	93 81       	ldd	r25, Z+3	; 0x03
 c08:	0c 5f       	subi	r16, 0xFC	; 252
 c0a:	1f 4f       	sbci	r17, 0xFF	; 255
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0x292>
 c0e:	60 81       	ld	r22, Z
 c10:	71 81       	ldd	r23, Z+1	; 0x01
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 5f       	subi	r16, 0xFE	; 254
 c18:	1f 4f       	sbci	r17, 0xFF	; 255
 c1a:	a4 01       	movw	r20, r8
 c1c:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__ultoa_invert>
 c20:	a8 2e       	mov	r10, r24
 c22:	a8 18       	sub	r10, r8
 c24:	8f e7       	ldi	r24, 0x7F	; 127
 c26:	68 2e       	mov	r6, r24
 c28:	6b 20       	and	r6, r11
 c2a:	66 fe       	sbrs	r6, 6
 c2c:	0b c0       	rjmp	.+22     	; 0xc44 <vfprintf+0x2bc>
 c2e:	36 2d       	mov	r19, r6
 c30:	3e 7f       	andi	r19, 0xFE	; 254
 c32:	a7 14       	cp	r10, r7
 c34:	50 f4       	brcc	.+20     	; 0xc4a <vfprintf+0x2c2>
 c36:	64 fe       	sbrs	r6, 4
 c38:	0a c0       	rjmp	.+20     	; 0xc4e <vfprintf+0x2c6>
 c3a:	62 fc       	sbrc	r6, 2
 c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0x2c6>
 c3e:	36 2d       	mov	r19, r6
 c40:	3e 7e       	andi	r19, 0xEE	; 238
 c42:	05 c0       	rjmp	.+10     	; 0xc4e <vfprintf+0x2c6>
 c44:	ba 2c       	mov	r11, r10
 c46:	36 2d       	mov	r19, r6
 c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x2c8>
 c4a:	ba 2c       	mov	r11, r10
 c4c:	01 c0       	rjmp	.+2      	; 0xc50 <vfprintf+0x2c8>
 c4e:	b7 2c       	mov	r11, r7
 c50:	34 ff       	sbrs	r19, 4
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <vfprintf+0x2e6>
 c54:	fe 01       	movw	r30, r28
 c56:	ea 0d       	add	r30, r10
 c58:	f1 1d       	adc	r31, r1
 c5a:	80 81       	ld	r24, Z
 c5c:	80 33       	cpi	r24, 0x30	; 48
 c5e:	11 f4       	brne	.+4      	; 0xc64 <vfprintf+0x2dc>
 c60:	39 7e       	andi	r19, 0xE9	; 233
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x2ee>
 c64:	32 ff       	sbrs	r19, 2
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <vfprintf+0x2ec>
 c68:	b3 94       	inc	r11
 c6a:	b3 94       	inc	r11
 c6c:	04 c0       	rjmp	.+8      	; 0xc76 <vfprintf+0x2ee>
 c6e:	83 2f       	mov	r24, r19
 c70:	86 78       	andi	r24, 0x86	; 134
 c72:	09 f0       	breq	.+2      	; 0xc76 <vfprintf+0x2ee>
 c74:	b3 94       	inc	r11
 c76:	33 fd       	sbrc	r19, 3
 c78:	14 c0       	rjmp	.+40     	; 0xca2 <vfprintf+0x31a>
 c7a:	30 ff       	sbrs	r19, 0
 c7c:	0f c0       	rjmp	.+30     	; 0xc9c <vfprintf+0x314>
 c7e:	7a 2c       	mov	r7, r10
 c80:	b3 14       	cp	r11, r3
 c82:	60 f4       	brcc	.+24     	; 0xc9c <vfprintf+0x314>
 c84:	73 0c       	add	r7, r3
 c86:	7b 18       	sub	r7, r11
 c88:	b3 2c       	mov	r11, r3
 c8a:	08 c0       	rjmp	.+16     	; 0xc9c <vfprintf+0x314>
 c8c:	b7 01       	movw	r22, r14
 c8e:	80 e2       	ldi	r24, 0x20	; 32
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	3c 87       	std	Y+12, r19	; 0x0c
 c94:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 c98:	b3 94       	inc	r11
 c9a:	3c 85       	ldd	r19, Y+12	; 0x0c
 c9c:	b3 14       	cp	r11, r3
 c9e:	b0 f3       	brcs	.-20     	; 0xc8c <vfprintf+0x304>
 ca0:	04 c0       	rjmp	.+8      	; 0xcaa <vfprintf+0x322>
 ca2:	b3 14       	cp	r11, r3
 ca4:	10 f4       	brcc	.+4      	; 0xcaa <vfprintf+0x322>
 ca6:	3b 18       	sub	r3, r11
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <vfprintf+0x324>
 caa:	31 2c       	mov	r3, r1
 cac:	34 ff       	sbrs	r19, 4
 cae:	12 c0       	rjmp	.+36     	; 0xcd4 <vfprintf+0x34c>
 cb0:	b7 01       	movw	r22, r14
 cb2:	80 e3       	ldi	r24, 0x30	; 48
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	3c 87       	std	Y+12, r19	; 0x0c
 cb8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cbc:	3c 85       	ldd	r19, Y+12	; 0x0c
 cbe:	32 ff       	sbrs	r19, 2
 cc0:	1e c0       	rjmp	.+60     	; 0xcfe <vfprintf+0x376>
 cc2:	31 ff       	sbrs	r19, 1
 cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x344>
 cc6:	88 e5       	ldi	r24, 0x58	; 88
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x348>
 ccc:	88 e7       	ldi	r24, 0x78	; 120
 cce:	90 e0       	ldi	r25, 0x00	; 0
 cd0:	b7 01       	movw	r22, r14
 cd2:	0c c0       	rjmp	.+24     	; 0xcec <vfprintf+0x364>
 cd4:	83 2f       	mov	r24, r19
 cd6:	86 78       	andi	r24, 0x86	; 134
 cd8:	91 f0       	breq	.+36     	; 0xcfe <vfprintf+0x376>
 cda:	31 fd       	sbrc	r19, 1
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x35a>
 cde:	80 e2       	ldi	r24, 0x20	; 32
 ce0:	01 c0       	rjmp	.+2      	; 0xce4 <vfprintf+0x35c>
 ce2:	8b e2       	ldi	r24, 0x2B	; 43
 ce4:	37 fd       	sbrc	r19, 7
 ce6:	8d e2       	ldi	r24, 0x2D	; 45
 ce8:	b7 01       	movw	r22, r14
 cea:	90 e0       	ldi	r25, 0x00	; 0
 cec:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cf0:	06 c0       	rjmp	.+12     	; 0xcfe <vfprintf+0x376>
 cf2:	b7 01       	movw	r22, r14
 cf4:	80 e3       	ldi	r24, 0x30	; 48
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 cfc:	7a 94       	dec	r7
 cfe:	a7 14       	cp	r10, r7
 d00:	c0 f3       	brcs	.-16     	; 0xcf2 <vfprintf+0x36a>
 d02:	aa 94       	dec	r10
 d04:	f4 01       	movw	r30, r8
 d06:	ea 0d       	add	r30, r10
 d08:	f1 1d       	adc	r31, r1
 d0a:	b7 01       	movw	r22, r14
 d0c:	80 81       	ld	r24, Z
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 d14:	a1 10       	cpse	r10, r1
 d16:	f5 cf       	rjmp	.-22     	; 0xd02 <vfprintf+0x37a>
 d18:	06 c0       	rjmp	.+12     	; 0xd26 <vfprintf+0x39e>
 d1a:	b7 01       	movw	r22, r14
 d1c:	80 e2       	ldi	r24, 0x20	; 32
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fputc>
 d24:	3a 94       	dec	r3
 d26:	31 10       	cpse	r3, r1
 d28:	f8 cf       	rjmp	.-16     	; 0xd1a <vfprintf+0x392>
 d2a:	42 ce       	rjmp	.-892    	; 0x9b0 <vfprintf+0x28>
 d2c:	f7 01       	movw	r30, r14
 d2e:	26 81       	ldd	r18, Z+6	; 0x06
 d30:	37 81       	ldd	r19, Z+7	; 0x07
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <vfprintf+0x3b0>
 d34:	2f ef       	ldi	r18, 0xFF	; 255
 d36:	3f ef       	ldi	r19, 0xFF	; 255
 d38:	c9 01       	movw	r24, r18
 d3a:	2c 96       	adiw	r28, 0x0c	; 12
 d3c:	e2 e1       	ldi	r30, 0x12	; 18
 d3e:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__epilogue_restores__>

00000d42 <strnlen_P>:
 d42:	fc 01       	movw	r30, r24
 d44:	05 90       	lpm	r0, Z+
 d46:	61 50       	subi	r22, 0x01	; 1
 d48:	70 40       	sbci	r23, 0x00	; 0
 d4a:	01 10       	cpse	r0, r1
 d4c:	d8 f7       	brcc	.-10     	; 0xd44 <strnlen_P+0x2>
 d4e:	80 95       	com	r24
 d50:	90 95       	com	r25
 d52:	8e 0f       	add	r24, r30
 d54:	9f 1f       	adc	r25, r31
 d56:	08 95       	ret

00000d58 <strnlen>:
 d58:	fc 01       	movw	r30, r24
 d5a:	61 50       	subi	r22, 0x01	; 1
 d5c:	70 40       	sbci	r23, 0x00	; 0
 d5e:	01 90       	ld	r0, Z+
 d60:	01 10       	cpse	r0, r1
 d62:	d8 f7       	brcc	.-10     	; 0xd5a <strnlen+0x2>
 d64:	80 95       	com	r24
 d66:	90 95       	com	r25
 d68:	8e 0f       	add	r24, r30
 d6a:	9f 1f       	adc	r25, r31
 d6c:	08 95       	ret

00000d6e <fputc>:
 d6e:	0f 93       	push	r16
 d70:	1f 93       	push	r17
 d72:	cf 93       	push	r28
 d74:	df 93       	push	r29
 d76:	8c 01       	movw	r16, r24
 d78:	eb 01       	movw	r28, r22
 d7a:	8b 81       	ldd	r24, Y+3	; 0x03
 d7c:	81 fd       	sbrc	r24, 1
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <fputc+0x18>
 d80:	0f ef       	ldi	r16, 0xFF	; 255
 d82:	1f ef       	ldi	r17, 0xFF	; 255
 d84:	1a c0       	rjmp	.+52     	; 0xdba <fputc+0x4c>
 d86:	82 ff       	sbrs	r24, 2
 d88:	0d c0       	rjmp	.+26     	; 0xda4 <fputc+0x36>
 d8a:	2e 81       	ldd	r18, Y+6	; 0x06
 d8c:	3f 81       	ldd	r19, Y+7	; 0x07
 d8e:	8c 81       	ldd	r24, Y+4	; 0x04
 d90:	9d 81       	ldd	r25, Y+5	; 0x05
 d92:	28 17       	cp	r18, r24
 d94:	39 07       	cpc	r19, r25
 d96:	64 f4       	brge	.+24     	; 0xdb0 <fputc+0x42>
 d98:	e8 81       	ld	r30, Y
 d9a:	f9 81       	ldd	r31, Y+1	; 0x01
 d9c:	01 93       	st	Z+, r16
 d9e:	f9 83       	std	Y+1, r31	; 0x01
 da0:	e8 83       	st	Y, r30
 da2:	06 c0       	rjmp	.+12     	; 0xdb0 <fputc+0x42>
 da4:	e8 85       	ldd	r30, Y+8	; 0x08
 da6:	f9 85       	ldd	r31, Y+9	; 0x09
 da8:	80 2f       	mov	r24, r16
 daa:	09 95       	icall
 dac:	89 2b       	or	r24, r25
 dae:	41 f7       	brne	.-48     	; 0xd80 <fputc+0x12>
 db0:	8e 81       	ldd	r24, Y+6	; 0x06
 db2:	9f 81       	ldd	r25, Y+7	; 0x07
 db4:	01 96       	adiw	r24, 0x01	; 1
 db6:	9f 83       	std	Y+7, r25	; 0x07
 db8:	8e 83       	std	Y+6, r24	; 0x06
 dba:	c8 01       	movw	r24, r16
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	1f 91       	pop	r17
 dc2:	0f 91       	pop	r16
 dc4:	08 95       	ret

00000dc6 <__ultoa_invert>:
 dc6:	fa 01       	movw	r30, r20
 dc8:	aa 27       	eor	r26, r26
 dca:	28 30       	cpi	r18, 0x08	; 8
 dcc:	51 f1       	breq	.+84     	; 0xe22 <__ultoa_invert+0x5c>
 dce:	20 31       	cpi	r18, 0x10	; 16
 dd0:	81 f1       	breq	.+96     	; 0xe32 <__ultoa_invert+0x6c>
 dd2:	e8 94       	clt
 dd4:	6f 93       	push	r22
 dd6:	6e 7f       	andi	r22, 0xFE	; 254
 dd8:	6e 5f       	subi	r22, 0xFE	; 254
 dda:	7f 4f       	sbci	r23, 0xFF	; 255
 ddc:	8f 4f       	sbci	r24, 0xFF	; 255
 dde:	9f 4f       	sbci	r25, 0xFF	; 255
 de0:	af 4f       	sbci	r26, 0xFF	; 255
 de2:	b1 e0       	ldi	r27, 0x01	; 1
 de4:	3e d0       	rcall	.+124    	; 0xe62 <__ultoa_invert+0x9c>
 de6:	b4 e0       	ldi	r27, 0x04	; 4
 de8:	3c d0       	rcall	.+120    	; 0xe62 <__ultoa_invert+0x9c>
 dea:	67 0f       	add	r22, r23
 dec:	78 1f       	adc	r23, r24
 dee:	89 1f       	adc	r24, r25
 df0:	9a 1f       	adc	r25, r26
 df2:	a1 1d       	adc	r26, r1
 df4:	68 0f       	add	r22, r24
 df6:	79 1f       	adc	r23, r25
 df8:	8a 1f       	adc	r24, r26
 dfa:	91 1d       	adc	r25, r1
 dfc:	a1 1d       	adc	r26, r1
 dfe:	6a 0f       	add	r22, r26
 e00:	71 1d       	adc	r23, r1
 e02:	81 1d       	adc	r24, r1
 e04:	91 1d       	adc	r25, r1
 e06:	a1 1d       	adc	r26, r1
 e08:	20 d0       	rcall	.+64     	; 0xe4a <__ultoa_invert+0x84>
 e0a:	09 f4       	brne	.+2      	; 0xe0e <__ultoa_invert+0x48>
 e0c:	68 94       	set
 e0e:	3f 91       	pop	r19
 e10:	2a e0       	ldi	r18, 0x0A	; 10
 e12:	26 9f       	mul	r18, r22
 e14:	11 24       	eor	r1, r1
 e16:	30 19       	sub	r19, r0
 e18:	30 5d       	subi	r19, 0xD0	; 208
 e1a:	31 93       	st	Z+, r19
 e1c:	de f6       	brtc	.-74     	; 0xdd4 <__ultoa_invert+0xe>
 e1e:	cf 01       	movw	r24, r30
 e20:	08 95       	ret
 e22:	46 2f       	mov	r20, r22
 e24:	47 70       	andi	r20, 0x07	; 7
 e26:	40 5d       	subi	r20, 0xD0	; 208
 e28:	41 93       	st	Z+, r20
 e2a:	b3 e0       	ldi	r27, 0x03	; 3
 e2c:	0f d0       	rcall	.+30     	; 0xe4c <__ultoa_invert+0x86>
 e2e:	c9 f7       	brne	.-14     	; 0xe22 <__ultoa_invert+0x5c>
 e30:	f6 cf       	rjmp	.-20     	; 0xe1e <__ultoa_invert+0x58>
 e32:	46 2f       	mov	r20, r22
 e34:	4f 70       	andi	r20, 0x0F	; 15
 e36:	40 5d       	subi	r20, 0xD0	; 208
 e38:	4a 33       	cpi	r20, 0x3A	; 58
 e3a:	18 f0       	brcs	.+6      	; 0xe42 <__ultoa_invert+0x7c>
 e3c:	49 5d       	subi	r20, 0xD9	; 217
 e3e:	31 fd       	sbrc	r19, 1
 e40:	40 52       	subi	r20, 0x20	; 32
 e42:	41 93       	st	Z+, r20
 e44:	02 d0       	rcall	.+4      	; 0xe4a <__ultoa_invert+0x84>
 e46:	a9 f7       	brne	.-22     	; 0xe32 <__ultoa_invert+0x6c>
 e48:	ea cf       	rjmp	.-44     	; 0xe1e <__ultoa_invert+0x58>
 e4a:	b4 e0       	ldi	r27, 0x04	; 4
 e4c:	a6 95       	lsr	r26
 e4e:	97 95       	ror	r25
 e50:	87 95       	ror	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	ba 95       	dec	r27
 e58:	c9 f7       	brne	.-14     	; 0xe4c <__ultoa_invert+0x86>
 e5a:	00 97       	sbiw	r24, 0x00	; 0
 e5c:	61 05       	cpc	r22, r1
 e5e:	71 05       	cpc	r23, r1
 e60:	08 95       	ret
 e62:	9b 01       	movw	r18, r22
 e64:	ac 01       	movw	r20, r24
 e66:	0a 2e       	mov	r0, r26
 e68:	06 94       	lsr	r0
 e6a:	57 95       	ror	r21
 e6c:	47 95       	ror	r20
 e6e:	37 95       	ror	r19
 e70:	27 95       	ror	r18
 e72:	ba 95       	dec	r27
 e74:	c9 f7       	brne	.-14     	; 0xe68 <__ultoa_invert+0xa2>
 e76:	62 0f       	add	r22, r18
 e78:	73 1f       	adc	r23, r19
 e7a:	84 1f       	adc	r24, r20
 e7c:	95 1f       	adc	r25, r21
 e7e:	a0 1d       	adc	r26, r0
 e80:	08 95       	ret

00000e82 <__prologue_saves__>:
 e82:	2f 92       	push	r2
 e84:	3f 92       	push	r3
 e86:	4f 92       	push	r4
 e88:	5f 92       	push	r5
 e8a:	6f 92       	push	r6
 e8c:	7f 92       	push	r7
 e8e:	8f 92       	push	r8
 e90:	9f 92       	push	r9
 e92:	af 92       	push	r10
 e94:	bf 92       	push	r11
 e96:	cf 92       	push	r12
 e98:	df 92       	push	r13
 e9a:	ef 92       	push	r14
 e9c:	ff 92       	push	r15
 e9e:	0f 93       	push	r16
 ea0:	1f 93       	push	r17
 ea2:	cf 93       	push	r28
 ea4:	df 93       	push	r29
 ea6:	cd b7       	in	r28, 0x3d	; 61
 ea8:	de b7       	in	r29, 0x3e	; 62
 eaa:	ca 1b       	sub	r28, r26
 eac:	db 0b       	sbc	r29, r27
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	f8 94       	cli
 eb2:	de bf       	out	0x3e, r29	; 62
 eb4:	0f be       	out	0x3f, r0	; 63
 eb6:	cd bf       	out	0x3d, r28	; 61
 eb8:	09 94       	ijmp

00000eba <__epilogue_restores__>:
 eba:	2a 88       	ldd	r2, Y+18	; 0x12
 ebc:	39 88       	ldd	r3, Y+17	; 0x11
 ebe:	48 88       	ldd	r4, Y+16	; 0x10
 ec0:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec2:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec4:	7d 84       	ldd	r7, Y+13	; 0x0d
 ec6:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec8:	9b 84       	ldd	r9, Y+11	; 0x0b
 eca:	aa 84       	ldd	r10, Y+10	; 0x0a
 ecc:	b9 84       	ldd	r11, Y+9	; 0x09
 ece:	c8 84       	ldd	r12, Y+8	; 0x08
 ed0:	df 80       	ldd	r13, Y+7	; 0x07
 ed2:	ee 80       	ldd	r14, Y+6	; 0x06
 ed4:	fd 80       	ldd	r15, Y+5	; 0x05
 ed6:	0c 81       	ldd	r16, Y+4	; 0x04
 ed8:	1b 81       	ldd	r17, Y+3	; 0x03
 eda:	aa 81       	ldd	r26, Y+2	; 0x02
 edc:	b9 81       	ldd	r27, Y+1	; 0x01
 ede:	ce 0f       	add	r28, r30
 ee0:	d1 1d       	adc	r29, r1
 ee2:	0f b6       	in	r0, 0x3f	; 63
 ee4:	f8 94       	cli
 ee6:	de bf       	out	0x3e, r29	; 62
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	cd bf       	out	0x3d, r28	; 61
 eec:	ed 01       	movw	r28, r26
 eee:	08 95       	ret

00000ef0 <_exit>:
 ef0:	f8 94       	cli

00000ef2 <__stop_program>:
 ef2:	ff cf       	rjmp	.-2      	; 0xef2 <__stop_program>
